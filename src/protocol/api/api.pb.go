// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/api.proto

package api

import (
	core "protocol/core"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ReturnResponseCode int32

const (
	Return_SUCCESS                      ReturnResponseCode = 0
	Return_SIGERROR                     ReturnResponseCode = 1
	Return_CONTRACT_VALIDATE_ERROR      ReturnResponseCode = 2
	Return_CONTRACT_EXE_ERROR           ReturnResponseCode = 3
	Return_BANDWITH_ERROR               ReturnResponseCode = 4
	Return_DUP_TRANSACTION_ERROR        ReturnResponseCode = 5
	Return_TAPOS_ERROR                  ReturnResponseCode = 6
	Return_TOO_BIG_TRANSACTION_ERROR    ReturnResponseCode = 7
	Return_TRANSACTION_EXPIRATION_ERROR ReturnResponseCode = 8
	Return_SERVER_BUSY                  ReturnResponseCode = 9
	Return_OTHER_ERROR                  ReturnResponseCode = 20
)

var ReturnResponseCode_name = map[int32]string{
	0:  "SUCCESS",
	1:  "SIGERROR",
	2:  "CONTRACT_VALIDATE_ERROR",
	3:  "CONTRACT_EXE_ERROR",
	4:  "BANDWITH_ERROR",
	5:  "DUP_TRANSACTION_ERROR",
	6:  "TAPOS_ERROR",
	7:  "TOO_BIG_TRANSACTION_ERROR",
	8:  "TRANSACTION_EXPIRATION_ERROR",
	9:  "SERVER_BUSY",
	20: "OTHER_ERROR",
}

var ReturnResponseCode_value = map[string]int32{
	"SUCCESS":                      0,
	"SIGERROR":                     1,
	"CONTRACT_VALIDATE_ERROR":      2,
	"CONTRACT_EXE_ERROR":           3,
	"BANDWITH_ERROR":               4,
	"DUP_TRANSACTION_ERROR":        5,
	"TAPOS_ERROR":                  6,
	"TOO_BIG_TRANSACTION_ERROR":    7,
	"TRANSACTION_EXPIRATION_ERROR": 8,
	"SERVER_BUSY":                  9,
	"OTHER_ERROR":                  20,
}

func (x ReturnResponseCode) String() string {
	return proto.EnumName(ReturnResponseCode_name, int32(x))
}

func (ReturnResponseCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{0, 0}
}

type Return struct {
	Result               bool               `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Code                 ReturnResponseCode `protobuf:"varint,2,opt,name=code,proto3,enum=protocol.ReturnResponseCode" json:"code,omitempty"`
	Message              []byte             `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Return) Reset()         { *m = Return{} }
func (m *Return) String() string { return proto.CompactTextString(m) }
func (*Return) ProtoMessage()    {}
func (*Return) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{0}
}

func (m *Return) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Return.Unmarshal(m, b)
}
func (m *Return) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Return.Marshal(b, m, deterministic)
}
func (m *Return) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Return.Merge(m, src)
}
func (m *Return) XXX_Size() int {
	return xxx_messageInfo_Return.Size(m)
}
func (m *Return) XXX_DiscardUnknown() {
	xxx_messageInfo_Return.DiscardUnknown(m)
}

var xxx_messageInfo_Return proto.InternalMessageInfo

func (m *Return) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *Return) GetCode() ReturnResponseCode {
	if m != nil {
		return m.Code
	}
	return Return_SUCCESS
}

func (m *Return) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

type BlockReference struct {
	BlockNum             int64    `protobuf:"varint,1,opt,name=block_num,json=blockNum,proto3" json:"block_num,omitempty"`
	BlockHash            []byte   `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockReference) Reset()         { *m = BlockReference{} }
func (m *BlockReference) String() string { return proto.CompactTextString(m) }
func (*BlockReference) ProtoMessage()    {}
func (*BlockReference) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{1}
}

func (m *BlockReference) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockReference.Unmarshal(m, b)
}
func (m *BlockReference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockReference.Marshal(b, m, deterministic)
}
func (m *BlockReference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockReference.Merge(m, src)
}
func (m *BlockReference) XXX_Size() int {
	return xxx_messageInfo_BlockReference.Size(m)
}
func (m *BlockReference) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockReference.DiscardUnknown(m)
}

var xxx_messageInfo_BlockReference proto.InternalMessageInfo

func (m *BlockReference) GetBlockNum() int64 {
	if m != nil {
		return m.BlockNum
	}
	return 0
}

func (m *BlockReference) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

type WitnessList struct {
	Witnesses            []*core.Witness `protobuf:"bytes,1,rep,name=witnesses,proto3" json:"witnesses,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *WitnessList) Reset()         { *m = WitnessList{} }
func (m *WitnessList) String() string { return proto.CompactTextString(m) }
func (*WitnessList) ProtoMessage()    {}
func (*WitnessList) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{2}
}

func (m *WitnessList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WitnessList.Unmarshal(m, b)
}
func (m *WitnessList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WitnessList.Marshal(b, m, deterministic)
}
func (m *WitnessList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WitnessList.Merge(m, src)
}
func (m *WitnessList) XXX_Size() int {
	return xxx_messageInfo_WitnessList.Size(m)
}
func (m *WitnessList) XXX_DiscardUnknown() {
	xxx_messageInfo_WitnessList.DiscardUnknown(m)
}

var xxx_messageInfo_WitnessList proto.InternalMessageInfo

func (m *WitnessList) GetWitnesses() []*core.Witness {
	if m != nil {
		return m.Witnesses
	}
	return nil
}

type ProposalList struct {
	Proposals            []*core.Proposal `protobuf:"bytes,1,rep,name=proposals,proto3" json:"proposals,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ProposalList) Reset()         { *m = ProposalList{} }
func (m *ProposalList) String() string { return proto.CompactTextString(m) }
func (*ProposalList) ProtoMessage()    {}
func (*ProposalList) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{3}
}

func (m *ProposalList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProposalList.Unmarshal(m, b)
}
func (m *ProposalList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProposalList.Marshal(b, m, deterministic)
}
func (m *ProposalList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalList.Merge(m, src)
}
func (m *ProposalList) XXX_Size() int {
	return xxx_messageInfo_ProposalList.Size(m)
}
func (m *ProposalList) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalList.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalList proto.InternalMessageInfo

func (m *ProposalList) GetProposals() []*core.Proposal {
	if m != nil {
		return m.Proposals
	}
	return nil
}

type ExchangeList struct {
	Exchanges            []*core.Exchange `protobuf:"bytes,1,rep,name=exchanges,proto3" json:"exchanges,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ExchangeList) Reset()         { *m = ExchangeList{} }
func (m *ExchangeList) String() string { return proto.CompactTextString(m) }
func (*ExchangeList) ProtoMessage()    {}
func (*ExchangeList) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{4}
}

func (m *ExchangeList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExchangeList.Unmarshal(m, b)
}
func (m *ExchangeList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExchangeList.Marshal(b, m, deterministic)
}
func (m *ExchangeList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExchangeList.Merge(m, src)
}
func (m *ExchangeList) XXX_Size() int {
	return xxx_messageInfo_ExchangeList.Size(m)
}
func (m *ExchangeList) XXX_DiscardUnknown() {
	xxx_messageInfo_ExchangeList.DiscardUnknown(m)
}

var xxx_messageInfo_ExchangeList proto.InternalMessageInfo

func (m *ExchangeList) GetExchanges() []*core.Exchange {
	if m != nil {
		return m.Exchanges
	}
	return nil
}

type AssetIssueList struct {
	AssetIssue           []*core.AssetIssueContract `protobuf:"bytes,1,rep,name=assetIssue,proto3" json:"assetIssue,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *AssetIssueList) Reset()         { *m = AssetIssueList{} }
func (m *AssetIssueList) String() string { return proto.CompactTextString(m) }
func (*AssetIssueList) ProtoMessage()    {}
func (*AssetIssueList) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{5}
}

func (m *AssetIssueList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssetIssueList.Unmarshal(m, b)
}
func (m *AssetIssueList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssetIssueList.Marshal(b, m, deterministic)
}
func (m *AssetIssueList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetIssueList.Merge(m, src)
}
func (m *AssetIssueList) XXX_Size() int {
	return xxx_messageInfo_AssetIssueList.Size(m)
}
func (m *AssetIssueList) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetIssueList.DiscardUnknown(m)
}

var xxx_messageInfo_AssetIssueList proto.InternalMessageInfo

func (m *AssetIssueList) GetAssetIssue() []*core.AssetIssueContract {
	if m != nil {
		return m.AssetIssue
	}
	return nil
}

type BlockList struct {
	Block                []*core.Block `protobuf:"bytes,1,rep,name=block,proto3" json:"block,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *BlockList) Reset()         { *m = BlockList{} }
func (m *BlockList) String() string { return proto.CompactTextString(m) }
func (*BlockList) ProtoMessage()    {}
func (*BlockList) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{6}
}

func (m *BlockList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockList.Unmarshal(m, b)
}
func (m *BlockList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockList.Marshal(b, m, deterministic)
}
func (m *BlockList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockList.Merge(m, src)
}
func (m *BlockList) XXX_Size() int {
	return xxx_messageInfo_BlockList.Size(m)
}
func (m *BlockList) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockList.DiscardUnknown(m)
}

var xxx_messageInfo_BlockList proto.InternalMessageInfo

func (m *BlockList) GetBlock() []*core.Block {
	if m != nil {
		return m.Block
	}
	return nil
}

type TransactionList struct {
	Transaction          []*core.Transaction `protobuf:"bytes,1,rep,name=transaction,proto3" json:"transaction,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *TransactionList) Reset()         { *m = TransactionList{} }
func (m *TransactionList) String() string { return proto.CompactTextString(m) }
func (*TransactionList) ProtoMessage()    {}
func (*TransactionList) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{7}
}

func (m *TransactionList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransactionList.Unmarshal(m, b)
}
func (m *TransactionList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransactionList.Marshal(b, m, deterministic)
}
func (m *TransactionList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionList.Merge(m, src)
}
func (m *TransactionList) XXX_Size() int {
	return xxx_messageInfo_TransactionList.Size(m)
}
func (m *TransactionList) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionList.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionList proto.InternalMessageInfo

func (m *TransactionList) GetTransaction() []*core.Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

// Gossip node list
type NodeList struct {
	Nodes                []*Node  `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeList) Reset()         { *m = NodeList{} }
func (m *NodeList) String() string { return proto.CompactTextString(m) }
func (*NodeList) ProtoMessage()    {}
func (*NodeList) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{8}
}

func (m *NodeList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeList.Unmarshal(m, b)
}
func (m *NodeList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeList.Marshal(b, m, deterministic)
}
func (m *NodeList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeList.Merge(m, src)
}
func (m *NodeList) XXX_Size() int {
	return xxx_messageInfo_NodeList.Size(m)
}
func (m *NodeList) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeList.DiscardUnknown(m)
}

var xxx_messageInfo_NodeList proto.InternalMessageInfo

func (m *NodeList) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

// Gossip node
type Node struct {
	Address              *Address `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{9}
}

func (m *Node) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Node.Unmarshal(m, b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Node.Marshal(b, m, deterministic)
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return xxx_messageInfo_Node.Size(m)
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetAddress() *Address {
	if m != nil {
		return m.Address
	}
	return nil
}

// Gossip node address
type Address struct {
	Host                 []byte   `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port                 int32    `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Address) Reset()         { *m = Address{} }
func (m *Address) String() string { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()    {}
func (*Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{10}
}

func (m *Address) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Address.Unmarshal(m, b)
}
func (m *Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Address.Marshal(b, m, deterministic)
}
func (m *Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Address.Merge(m, src)
}
func (m *Address) XXX_Size() int {
	return xxx_messageInfo_Address.Size(m)
}
func (m *Address) XXX_DiscardUnknown() {
	xxx_messageInfo_Address.DiscardUnknown(m)
}

var xxx_messageInfo_Address proto.InternalMessageInfo

func (m *Address) GetHost() []byte {
	if m != nil {
		return m.Host
	}
	return nil
}

func (m *Address) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type EmptyMessage struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyMessage) Reset()         { *m = EmptyMessage{} }
func (m *EmptyMessage) String() string { return proto.CompactTextString(m) }
func (*EmptyMessage) ProtoMessage()    {}
func (*EmptyMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{11}
}

func (m *EmptyMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmptyMessage.Unmarshal(m, b)
}
func (m *EmptyMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmptyMessage.Marshal(b, m, deterministic)
}
func (m *EmptyMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyMessage.Merge(m, src)
}
func (m *EmptyMessage) XXX_Size() int {
	return xxx_messageInfo_EmptyMessage.Size(m)
}
func (m *EmptyMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyMessage.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyMessage proto.InternalMessageInfo

type NumberMessage struct {
	Num                  int64    `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NumberMessage) Reset()         { *m = NumberMessage{} }
func (m *NumberMessage) String() string { return proto.CompactTextString(m) }
func (*NumberMessage) ProtoMessage()    {}
func (*NumberMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{12}
}

func (m *NumberMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NumberMessage.Unmarshal(m, b)
}
func (m *NumberMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NumberMessage.Marshal(b, m, deterministic)
}
func (m *NumberMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NumberMessage.Merge(m, src)
}
func (m *NumberMessage) XXX_Size() int {
	return xxx_messageInfo_NumberMessage.Size(m)
}
func (m *NumberMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_NumberMessage.DiscardUnknown(m)
}

var xxx_messageInfo_NumberMessage proto.InternalMessageInfo

func (m *NumberMessage) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

type BytesMessage struct {
	Value                []byte   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BytesMessage) Reset()         { *m = BytesMessage{} }
func (m *BytesMessage) String() string { return proto.CompactTextString(m) }
func (*BytesMessage) ProtoMessage()    {}
func (*BytesMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{13}
}

func (m *BytesMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BytesMessage.Unmarshal(m, b)
}
func (m *BytesMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BytesMessage.Marshal(b, m, deterministic)
}
func (m *BytesMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BytesMessage.Merge(m, src)
}
func (m *BytesMessage) XXX_Size() int {
	return xxx_messageInfo_BytesMessage.Size(m)
}
func (m *BytesMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_BytesMessage.DiscardUnknown(m)
}

var xxx_messageInfo_BytesMessage proto.InternalMessageInfo

func (m *BytesMessage) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type TimeMessage struct {
	BeginInMilliseconds  int64    `protobuf:"varint,1,opt,name=beginInMilliseconds,proto3" json:"beginInMilliseconds,omitempty"`
	EndInMilliseconds    int64    `protobuf:"varint,2,opt,name=endInMilliseconds,proto3" json:"endInMilliseconds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TimeMessage) Reset()         { *m = TimeMessage{} }
func (m *TimeMessage) String() string { return proto.CompactTextString(m) }
func (*TimeMessage) ProtoMessage()    {}
func (*TimeMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{14}
}

func (m *TimeMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimeMessage.Unmarshal(m, b)
}
func (m *TimeMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimeMessage.Marshal(b, m, deterministic)
}
func (m *TimeMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeMessage.Merge(m, src)
}
func (m *TimeMessage) XXX_Size() int {
	return xxx_messageInfo_TimeMessage.Size(m)
}
func (m *TimeMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TimeMessage proto.InternalMessageInfo

func (m *TimeMessage) GetBeginInMilliseconds() int64 {
	if m != nil {
		return m.BeginInMilliseconds
	}
	return 0
}

func (m *TimeMessage) GetEndInMilliseconds() int64 {
	if m != nil {
		return m.EndInMilliseconds
	}
	return 0
}

type BlockLimit struct {
	StartNum             int64    `protobuf:"varint,1,opt,name=startNum,proto3" json:"startNum,omitempty"`
	EndNum               int64    `protobuf:"varint,2,opt,name=endNum,proto3" json:"endNum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockLimit) Reset()         { *m = BlockLimit{} }
func (m *BlockLimit) String() string { return proto.CompactTextString(m) }
func (*BlockLimit) ProtoMessage()    {}
func (*BlockLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{15}
}

func (m *BlockLimit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockLimit.Unmarshal(m, b)
}
func (m *BlockLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockLimit.Marshal(b, m, deterministic)
}
func (m *BlockLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockLimit.Merge(m, src)
}
func (m *BlockLimit) XXX_Size() int {
	return xxx_messageInfo_BlockLimit.Size(m)
}
func (m *BlockLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockLimit.DiscardUnknown(m)
}

var xxx_messageInfo_BlockLimit proto.InternalMessageInfo

func (m *BlockLimit) GetStartNum() int64 {
	if m != nil {
		return m.StartNum
	}
	return 0
}

func (m *BlockLimit) GetEndNum() int64 {
	if m != nil {
		return m.EndNum
	}
	return 0
}

type TransactionLimit struct {
	TransactionId        []byte   `protobuf:"bytes,1,opt,name=transactionId,proto3" json:"transactionId,omitempty"`
	LimitNum             int64    `protobuf:"varint,2,opt,name=limitNum,proto3" json:"limitNum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransactionLimit) Reset()         { *m = TransactionLimit{} }
func (m *TransactionLimit) String() string { return proto.CompactTextString(m) }
func (*TransactionLimit) ProtoMessage()    {}
func (*TransactionLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{16}
}

func (m *TransactionLimit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransactionLimit.Unmarshal(m, b)
}
func (m *TransactionLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransactionLimit.Marshal(b, m, deterministic)
}
func (m *TransactionLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionLimit.Merge(m, src)
}
func (m *TransactionLimit) XXX_Size() int {
	return xxx_messageInfo_TransactionLimit.Size(m)
}
func (m *TransactionLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionLimit.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionLimit proto.InternalMessageInfo

func (m *TransactionLimit) GetTransactionId() []byte {
	if m != nil {
		return m.TransactionId
	}
	return nil
}

func (m *TransactionLimit) GetLimitNum() int64 {
	if m != nil {
		return m.LimitNum
	}
	return 0
}

type AccountPaginated struct {
	Account              *core.Account `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Offset               int64         `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit                int64         `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *AccountPaginated) Reset()         { *m = AccountPaginated{} }
func (m *AccountPaginated) String() string { return proto.CompactTextString(m) }
func (*AccountPaginated) ProtoMessage()    {}
func (*AccountPaginated) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{17}
}

func (m *AccountPaginated) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountPaginated.Unmarshal(m, b)
}
func (m *AccountPaginated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountPaginated.Marshal(b, m, deterministic)
}
func (m *AccountPaginated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountPaginated.Merge(m, src)
}
func (m *AccountPaginated) XXX_Size() int {
	return xxx_messageInfo_AccountPaginated.Size(m)
}
func (m *AccountPaginated) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountPaginated.DiscardUnknown(m)
}

var xxx_messageInfo_AccountPaginated proto.InternalMessageInfo

func (m *AccountPaginated) GetAccount() *core.Account {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *AccountPaginated) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *AccountPaginated) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type TimePaginatedMessage struct {
	TimeMessage          *TimeMessage `protobuf:"bytes,1,opt,name=timeMessage,proto3" json:"timeMessage,omitempty"`
	Offset               int64        `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit                int64        `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *TimePaginatedMessage) Reset()         { *m = TimePaginatedMessage{} }
func (m *TimePaginatedMessage) String() string { return proto.CompactTextString(m) }
func (*TimePaginatedMessage) ProtoMessage()    {}
func (*TimePaginatedMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{18}
}

func (m *TimePaginatedMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimePaginatedMessage.Unmarshal(m, b)
}
func (m *TimePaginatedMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimePaginatedMessage.Marshal(b, m, deterministic)
}
func (m *TimePaginatedMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimePaginatedMessage.Merge(m, src)
}
func (m *TimePaginatedMessage) XXX_Size() int {
	return xxx_messageInfo_TimePaginatedMessage.Size(m)
}
func (m *TimePaginatedMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TimePaginatedMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TimePaginatedMessage proto.InternalMessageInfo

func (m *TimePaginatedMessage) GetTimeMessage() *TimeMessage {
	if m != nil {
		return m.TimeMessage
	}
	return nil
}

func (m *TimePaginatedMessage) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *TimePaginatedMessage) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// deprecated
type AccountNetMessage struct {
	FreeNetUsed          int64            `protobuf:"varint,1,opt,name=freeNetUsed,proto3" json:"freeNetUsed,omitempty"`
	FreeNetLimit         int64            `protobuf:"varint,2,opt,name=freeNetLimit,proto3" json:"freeNetLimit,omitempty"`
	NetUsed              int64            `protobuf:"varint,3,opt,name=NetUsed,proto3" json:"NetUsed,omitempty"`
	NetLimit             int64            `protobuf:"varint,4,opt,name=NetLimit,proto3" json:"NetLimit,omitempty"`
	AssetNetUsed         map[string]int64 `protobuf:"bytes,5,rep,name=assetNetUsed,proto3" json:"assetNetUsed,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	AssetNetLimit        map[string]int64 `protobuf:"bytes,6,rep,name=assetNetLimit,proto3" json:"assetNetLimit,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TotalNetLimit        int64            `protobuf:"varint,7,opt,name=TotalNetLimit,proto3" json:"TotalNetLimit,omitempty"`
	TotalNetWeight       int64            `protobuf:"varint,8,opt,name=TotalNetWeight,proto3" json:"TotalNetWeight,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *AccountNetMessage) Reset()         { *m = AccountNetMessage{} }
func (m *AccountNetMessage) String() string { return proto.CompactTextString(m) }
func (*AccountNetMessage) ProtoMessage()    {}
func (*AccountNetMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{19}
}

func (m *AccountNetMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountNetMessage.Unmarshal(m, b)
}
func (m *AccountNetMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountNetMessage.Marshal(b, m, deterministic)
}
func (m *AccountNetMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountNetMessage.Merge(m, src)
}
func (m *AccountNetMessage) XXX_Size() int {
	return xxx_messageInfo_AccountNetMessage.Size(m)
}
func (m *AccountNetMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountNetMessage.DiscardUnknown(m)
}

var xxx_messageInfo_AccountNetMessage proto.InternalMessageInfo

func (m *AccountNetMessage) GetFreeNetUsed() int64 {
	if m != nil {
		return m.FreeNetUsed
	}
	return 0
}

func (m *AccountNetMessage) GetFreeNetLimit() int64 {
	if m != nil {
		return m.FreeNetLimit
	}
	return 0
}

func (m *AccountNetMessage) GetNetUsed() int64 {
	if m != nil {
		return m.NetUsed
	}
	return 0
}

func (m *AccountNetMessage) GetNetLimit() int64 {
	if m != nil {
		return m.NetLimit
	}
	return 0
}

func (m *AccountNetMessage) GetAssetNetUsed() map[string]int64 {
	if m != nil {
		return m.AssetNetUsed
	}
	return nil
}

func (m *AccountNetMessage) GetAssetNetLimit() map[string]int64 {
	if m != nil {
		return m.AssetNetLimit
	}
	return nil
}

func (m *AccountNetMessage) GetTotalNetLimit() int64 {
	if m != nil {
		return m.TotalNetLimit
	}
	return 0
}

func (m *AccountNetMessage) GetTotalNetWeight() int64 {
	if m != nil {
		return m.TotalNetWeight
	}
	return 0
}

type AccountResourceMessage struct {
	FreeNetUsed          int64            `protobuf:"varint,1,opt,name=freeNetUsed,proto3" json:"freeNetUsed,omitempty"`
	FreeNetLimit         int64            `protobuf:"varint,2,opt,name=freeNetLimit,proto3" json:"freeNetLimit,omitempty"`
	NetUsed              int64            `protobuf:"varint,3,opt,name=NetUsed,proto3" json:"NetUsed,omitempty"`
	NetLimit             int64            `protobuf:"varint,4,opt,name=NetLimit,proto3" json:"NetLimit,omitempty"`
	AssetNetUsed         map[string]int64 `protobuf:"bytes,5,rep,name=assetNetUsed,proto3" json:"assetNetUsed,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	AssetNetLimit        map[string]int64 `protobuf:"bytes,6,rep,name=assetNetLimit,proto3" json:"assetNetLimit,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TotalNetLimit        int64            `protobuf:"varint,7,opt,name=TotalNetLimit,proto3" json:"TotalNetLimit,omitempty"`
	TotalNetWeight       int64            `protobuf:"varint,8,opt,name=TotalNetWeight,proto3" json:"TotalNetWeight,omitempty"`
	EnergyUsed           int64            `protobuf:"varint,13,opt,name=EnergyUsed,proto3" json:"EnergyUsed,omitempty"`
	EnergyLimit          int64            `protobuf:"varint,14,opt,name=EnergyLimit,proto3" json:"EnergyLimit,omitempty"`
	TotalEnergyLimit     int64            `protobuf:"varint,15,opt,name=TotalEnergyLimit,proto3" json:"TotalEnergyLimit,omitempty"`
	TotalEnergyWeight    int64            `protobuf:"varint,16,opt,name=TotalEnergyWeight,proto3" json:"TotalEnergyWeight,omitempty"`
	StorageUsed          int64            `protobuf:"varint,21,opt,name=storageUsed,proto3" json:"storageUsed,omitempty"`
	StorageLimit         int64            `protobuf:"varint,22,opt,name=storageLimit,proto3" json:"storageLimit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *AccountResourceMessage) Reset()         { *m = AccountResourceMessage{} }
func (m *AccountResourceMessage) String() string { return proto.CompactTextString(m) }
func (*AccountResourceMessage) ProtoMessage()    {}
func (*AccountResourceMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{20}
}

func (m *AccountResourceMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountResourceMessage.Unmarshal(m, b)
}
func (m *AccountResourceMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountResourceMessage.Marshal(b, m, deterministic)
}
func (m *AccountResourceMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountResourceMessage.Merge(m, src)
}
func (m *AccountResourceMessage) XXX_Size() int {
	return xxx_messageInfo_AccountResourceMessage.Size(m)
}
func (m *AccountResourceMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountResourceMessage.DiscardUnknown(m)
}

var xxx_messageInfo_AccountResourceMessage proto.InternalMessageInfo

func (m *AccountResourceMessage) GetFreeNetUsed() int64 {
	if m != nil {
		return m.FreeNetUsed
	}
	return 0
}

func (m *AccountResourceMessage) GetFreeNetLimit() int64 {
	if m != nil {
		return m.FreeNetLimit
	}
	return 0
}

func (m *AccountResourceMessage) GetNetUsed() int64 {
	if m != nil {
		return m.NetUsed
	}
	return 0
}

func (m *AccountResourceMessage) GetNetLimit() int64 {
	if m != nil {
		return m.NetLimit
	}
	return 0
}

func (m *AccountResourceMessage) GetAssetNetUsed() map[string]int64 {
	if m != nil {
		return m.AssetNetUsed
	}
	return nil
}

func (m *AccountResourceMessage) GetAssetNetLimit() map[string]int64 {
	if m != nil {
		return m.AssetNetLimit
	}
	return nil
}

func (m *AccountResourceMessage) GetTotalNetLimit() int64 {
	if m != nil {
		return m.TotalNetLimit
	}
	return 0
}

func (m *AccountResourceMessage) GetTotalNetWeight() int64 {
	if m != nil {
		return m.TotalNetWeight
	}
	return 0
}

func (m *AccountResourceMessage) GetEnergyUsed() int64 {
	if m != nil {
		return m.EnergyUsed
	}
	return 0
}

func (m *AccountResourceMessage) GetEnergyLimit() int64 {
	if m != nil {
		return m.EnergyLimit
	}
	return 0
}

func (m *AccountResourceMessage) GetTotalEnergyLimit() int64 {
	if m != nil {
		return m.TotalEnergyLimit
	}
	return 0
}

func (m *AccountResourceMessage) GetTotalEnergyWeight() int64 {
	if m != nil {
		return m.TotalEnergyWeight
	}
	return 0
}

func (m *AccountResourceMessage) GetStorageUsed() int64 {
	if m != nil {
		return m.StorageUsed
	}
	return 0
}

func (m *AccountResourceMessage) GetStorageLimit() int64 {
	if m != nil {
		return m.StorageLimit
	}
	return 0
}

type PaginatedMessage struct {
	Offset               int64    `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit                int64    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PaginatedMessage) Reset()         { *m = PaginatedMessage{} }
func (m *PaginatedMessage) String() string { return proto.CompactTextString(m) }
func (*PaginatedMessage) ProtoMessage()    {}
func (*PaginatedMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{21}
}

func (m *PaginatedMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PaginatedMessage.Unmarshal(m, b)
}
func (m *PaginatedMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PaginatedMessage.Marshal(b, m, deterministic)
}
func (m *PaginatedMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaginatedMessage.Merge(m, src)
}
func (m *PaginatedMessage) XXX_Size() int {
	return xxx_messageInfo_PaginatedMessage.Size(m)
}
func (m *PaginatedMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PaginatedMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PaginatedMessage proto.InternalMessageInfo

func (m *PaginatedMessage) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *PaginatedMessage) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type EasyTransferMessage struct {
	PassPhrase           []byte   `protobuf:"bytes,1,opt,name=passPhrase,proto3" json:"passPhrase,omitempty"`
	ToAddress            []byte   `protobuf:"bytes,2,opt,name=toAddress,proto3" json:"toAddress,omitempty"`
	Amount               int64    `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EasyTransferMessage) Reset()         { *m = EasyTransferMessage{} }
func (m *EasyTransferMessage) String() string { return proto.CompactTextString(m) }
func (*EasyTransferMessage) ProtoMessage()    {}
func (*EasyTransferMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{22}
}

func (m *EasyTransferMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EasyTransferMessage.Unmarshal(m, b)
}
func (m *EasyTransferMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EasyTransferMessage.Marshal(b, m, deterministic)
}
func (m *EasyTransferMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EasyTransferMessage.Merge(m, src)
}
func (m *EasyTransferMessage) XXX_Size() int {
	return xxx_messageInfo_EasyTransferMessage.Size(m)
}
func (m *EasyTransferMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_EasyTransferMessage.DiscardUnknown(m)
}

var xxx_messageInfo_EasyTransferMessage proto.InternalMessageInfo

func (m *EasyTransferMessage) GetPassPhrase() []byte {
	if m != nil {
		return m.PassPhrase
	}
	return nil
}

func (m *EasyTransferMessage) GetToAddress() []byte {
	if m != nil {
		return m.ToAddress
	}
	return nil
}

func (m *EasyTransferMessage) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type EasyTransferByPrivateMessage struct {
	PrivateKey           []byte   `protobuf:"bytes,1,opt,name=privateKey,proto3" json:"privateKey,omitempty"`
	ToAddress            []byte   `protobuf:"bytes,2,opt,name=toAddress,proto3" json:"toAddress,omitempty"`
	Amount               int64    `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EasyTransferByPrivateMessage) Reset()         { *m = EasyTransferByPrivateMessage{} }
func (m *EasyTransferByPrivateMessage) String() string { return proto.CompactTextString(m) }
func (*EasyTransferByPrivateMessage) ProtoMessage()    {}
func (*EasyTransferByPrivateMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{23}
}

func (m *EasyTransferByPrivateMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EasyTransferByPrivateMessage.Unmarshal(m, b)
}
func (m *EasyTransferByPrivateMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EasyTransferByPrivateMessage.Marshal(b, m, deterministic)
}
func (m *EasyTransferByPrivateMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EasyTransferByPrivateMessage.Merge(m, src)
}
func (m *EasyTransferByPrivateMessage) XXX_Size() int {
	return xxx_messageInfo_EasyTransferByPrivateMessage.Size(m)
}
func (m *EasyTransferByPrivateMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_EasyTransferByPrivateMessage.DiscardUnknown(m)
}

var xxx_messageInfo_EasyTransferByPrivateMessage proto.InternalMessageInfo

func (m *EasyTransferByPrivateMessage) GetPrivateKey() []byte {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

func (m *EasyTransferByPrivateMessage) GetToAddress() []byte {
	if m != nil {
		return m.ToAddress
	}
	return nil
}

func (m *EasyTransferByPrivateMessage) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type EasyTransferResponse struct {
	Transaction          *core.Transaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	Result               *Return           `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	Txid                 []byte            `protobuf:"bytes,3,opt,name=txid,proto3" json:"txid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *EasyTransferResponse) Reset()         { *m = EasyTransferResponse{} }
func (m *EasyTransferResponse) String() string { return proto.CompactTextString(m) }
func (*EasyTransferResponse) ProtoMessage()    {}
func (*EasyTransferResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{24}
}

func (m *EasyTransferResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EasyTransferResponse.Unmarshal(m, b)
}
func (m *EasyTransferResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EasyTransferResponse.Marshal(b, m, deterministic)
}
func (m *EasyTransferResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EasyTransferResponse.Merge(m, src)
}
func (m *EasyTransferResponse) XXX_Size() int {
	return xxx_messageInfo_EasyTransferResponse.Size(m)
}
func (m *EasyTransferResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EasyTransferResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EasyTransferResponse proto.InternalMessageInfo

func (m *EasyTransferResponse) GetTransaction() *core.Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (m *EasyTransferResponse) GetResult() *Return {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *EasyTransferResponse) GetTxid() []byte {
	if m != nil {
		return m.Txid
	}
	return nil
}

type AddressPrKeyPairMessage struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	PrivateKey           string   `protobuf:"bytes,2,opt,name=privateKey,proto3" json:"privateKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddressPrKeyPairMessage) Reset()         { *m = AddressPrKeyPairMessage{} }
func (m *AddressPrKeyPairMessage) String() string { return proto.CompactTextString(m) }
func (*AddressPrKeyPairMessage) ProtoMessage()    {}
func (*AddressPrKeyPairMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{25}
}

func (m *AddressPrKeyPairMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddressPrKeyPairMessage.Unmarshal(m, b)
}
func (m *AddressPrKeyPairMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddressPrKeyPairMessage.Marshal(b, m, deterministic)
}
func (m *AddressPrKeyPairMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressPrKeyPairMessage.Merge(m, src)
}
func (m *AddressPrKeyPairMessage) XXX_Size() int {
	return xxx_messageInfo_AddressPrKeyPairMessage.Size(m)
}
func (m *AddressPrKeyPairMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressPrKeyPairMessage.DiscardUnknown(m)
}

var xxx_messageInfo_AddressPrKeyPairMessage proto.InternalMessageInfo

func (m *AddressPrKeyPairMessage) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *AddressPrKeyPairMessage) GetPrivateKey() string {
	if m != nil {
		return m.PrivateKey
	}
	return ""
}

type TransactionExtention struct {
	Transaction          *core.Transaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	Txid                 []byte            `protobuf:"bytes,2,opt,name=txid,proto3" json:"txid,omitempty"`
	ConstantResult       [][]byte          `protobuf:"bytes,3,rep,name=constant_result,json=constantResult,proto3" json:"constant_result,omitempty"`
	Result               *Return           `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TransactionExtention) Reset()         { *m = TransactionExtention{} }
func (m *TransactionExtention) String() string { return proto.CompactTextString(m) }
func (*TransactionExtention) ProtoMessage()    {}
func (*TransactionExtention) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{26}
}

func (m *TransactionExtention) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransactionExtention.Unmarshal(m, b)
}
func (m *TransactionExtention) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransactionExtention.Marshal(b, m, deterministic)
}
func (m *TransactionExtention) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionExtention.Merge(m, src)
}
func (m *TransactionExtention) XXX_Size() int {
	return xxx_messageInfo_TransactionExtention.Size(m)
}
func (m *TransactionExtention) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionExtention.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionExtention proto.InternalMessageInfo

func (m *TransactionExtention) GetTransaction() *core.Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (m *TransactionExtention) GetTxid() []byte {
	if m != nil {
		return m.Txid
	}
	return nil
}

func (m *TransactionExtention) GetConstantResult() [][]byte {
	if m != nil {
		return m.ConstantResult
	}
	return nil
}

func (m *TransactionExtention) GetResult() *Return {
	if m != nil {
		return m.Result
	}
	return nil
}

type BlockExtention struct {
	Transactions         []*TransactionExtention `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
	BlockHeader          *core.BlockHeader       `protobuf:"bytes,2,opt,name=block_header,json=blockHeader,proto3" json:"block_header,omitempty"`
	Blockid              []byte                  `protobuf:"bytes,3,opt,name=blockid,proto3" json:"blockid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *BlockExtention) Reset()         { *m = BlockExtention{} }
func (m *BlockExtention) String() string { return proto.CompactTextString(m) }
func (*BlockExtention) ProtoMessage()    {}
func (*BlockExtention) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{27}
}

func (m *BlockExtention) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockExtention.Unmarshal(m, b)
}
func (m *BlockExtention) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockExtention.Marshal(b, m, deterministic)
}
func (m *BlockExtention) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockExtention.Merge(m, src)
}
func (m *BlockExtention) XXX_Size() int {
	return xxx_messageInfo_BlockExtention.Size(m)
}
func (m *BlockExtention) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockExtention.DiscardUnknown(m)
}

var xxx_messageInfo_BlockExtention proto.InternalMessageInfo

func (m *BlockExtention) GetTransactions() []*TransactionExtention {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *BlockExtention) GetBlockHeader() *core.BlockHeader {
	if m != nil {
		return m.BlockHeader
	}
	return nil
}

func (m *BlockExtention) GetBlockid() []byte {
	if m != nil {
		return m.Blockid
	}
	return nil
}

type BlockListExtention struct {
	Block                []*BlockExtention `protobuf:"bytes,1,rep,name=block,proto3" json:"block,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *BlockListExtention) Reset()         { *m = BlockListExtention{} }
func (m *BlockListExtention) String() string { return proto.CompactTextString(m) }
func (*BlockListExtention) ProtoMessage()    {}
func (*BlockListExtention) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{28}
}

func (m *BlockListExtention) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockListExtention.Unmarshal(m, b)
}
func (m *BlockListExtention) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockListExtention.Marshal(b, m, deterministic)
}
func (m *BlockListExtention) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockListExtention.Merge(m, src)
}
func (m *BlockListExtention) XXX_Size() int {
	return xxx_messageInfo_BlockListExtention.Size(m)
}
func (m *BlockListExtention) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockListExtention.DiscardUnknown(m)
}

var xxx_messageInfo_BlockListExtention proto.InternalMessageInfo

func (m *BlockListExtention) GetBlock() []*BlockExtention {
	if m != nil {
		return m.Block
	}
	return nil
}

type TransactionListExtention struct {
	Transaction          []*TransactionExtention `protobuf:"bytes,1,rep,name=transaction,proto3" json:"transaction,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *TransactionListExtention) Reset()         { *m = TransactionListExtention{} }
func (m *TransactionListExtention) String() string { return proto.CompactTextString(m) }
func (*TransactionListExtention) ProtoMessage()    {}
func (*TransactionListExtention) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{29}
}

func (m *TransactionListExtention) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransactionListExtention.Unmarshal(m, b)
}
func (m *TransactionListExtention) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransactionListExtention.Marshal(b, m, deterministic)
}
func (m *TransactionListExtention) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionListExtention.Merge(m, src)
}
func (m *TransactionListExtention) XXX_Size() int {
	return xxx_messageInfo_TransactionListExtention.Size(m)
}
func (m *TransactionListExtention) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionListExtention.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionListExtention proto.InternalMessageInfo

func (m *TransactionListExtention) GetTransaction() []*TransactionExtention {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func init() {
	proto.RegisterEnum("protocol.ReturnResponseCode", ReturnResponseCode_name, ReturnResponseCode_value)
	proto.RegisterType((*Return)(nil), "protocol.Return")
	proto.RegisterType((*BlockReference)(nil), "protocol.BlockReference")
	proto.RegisterType((*WitnessList)(nil), "protocol.WitnessList")
	proto.RegisterType((*ProposalList)(nil), "protocol.ProposalList")
	proto.RegisterType((*ExchangeList)(nil), "protocol.ExchangeList")
	proto.RegisterType((*AssetIssueList)(nil), "protocol.AssetIssueList")
	proto.RegisterType((*BlockList)(nil), "protocol.BlockList")
	proto.RegisterType((*TransactionList)(nil), "protocol.TransactionList")
	proto.RegisterType((*NodeList)(nil), "protocol.NodeList")
	proto.RegisterType((*Node)(nil), "protocol.Node")
	proto.RegisterType((*Address)(nil), "protocol.Address")
	proto.RegisterType((*EmptyMessage)(nil), "protocol.EmptyMessage")
	proto.RegisterType((*NumberMessage)(nil), "protocol.NumberMessage")
	proto.RegisterType((*BytesMessage)(nil), "protocol.BytesMessage")
	proto.RegisterType((*TimeMessage)(nil), "protocol.TimeMessage")
	proto.RegisterType((*BlockLimit)(nil), "protocol.BlockLimit")
	proto.RegisterType((*TransactionLimit)(nil), "protocol.TransactionLimit")
	proto.RegisterType((*AccountPaginated)(nil), "protocol.AccountPaginated")
	proto.RegisterType((*TimePaginatedMessage)(nil), "protocol.TimePaginatedMessage")
	proto.RegisterType((*AccountNetMessage)(nil), "protocol.AccountNetMessage")
	proto.RegisterMapType((map[string]int64)(nil), "protocol.AccountNetMessage.AssetNetLimitEntry")
	proto.RegisterMapType((map[string]int64)(nil), "protocol.AccountNetMessage.AssetNetUsedEntry")
	proto.RegisterType((*AccountResourceMessage)(nil), "protocol.AccountResourceMessage")
	proto.RegisterMapType((map[string]int64)(nil), "protocol.AccountResourceMessage.AssetNetLimitEntry")
	proto.RegisterMapType((map[string]int64)(nil), "protocol.AccountResourceMessage.AssetNetUsedEntry")
	proto.RegisterType((*PaginatedMessage)(nil), "protocol.PaginatedMessage")
	proto.RegisterType((*EasyTransferMessage)(nil), "protocol.EasyTransferMessage")
	proto.RegisterType((*EasyTransferByPrivateMessage)(nil), "protocol.EasyTransferByPrivateMessage")
	proto.RegisterType((*EasyTransferResponse)(nil), "protocol.EasyTransferResponse")
	proto.RegisterType((*AddressPrKeyPairMessage)(nil), "protocol.AddressPrKeyPairMessage")
	proto.RegisterType((*TransactionExtention)(nil), "protocol.TransactionExtention")
	proto.RegisterType((*BlockExtention)(nil), "protocol.BlockExtention")
	proto.RegisterType((*BlockListExtention)(nil), "protocol.BlockListExtention")
	proto.RegisterType((*TransactionListExtention)(nil), "protocol.TransactionListExtention")
}

func init() { proto.RegisterFile("api/api.proto", fileDescriptor_1b40cafcd4234784) }

var fileDescriptor_1b40cafcd4234784 = []byte{
	// 2657 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5a, 0x49, 0x73, 0xdb, 0xc8,
	0x15, 0x16, 0xa9, 0xfd, 0x89, 0xa2, 0xa8, 0xd6, 0x62, 0x99, 0x23, 0x39, 0x1a, 0xd4, 0x2c, 0xaa,
	0x2c, 0x1a, 0x07, 0x93, 0xaa, 0x4c, 0x96, 0xca, 0x88, 0x94, 0x38, 0x12, 0x63, 0x9b, 0xe2, 0x80,
	0x94, 0x34, 0x9e, 0x9a, 0x8a, 0xaa, 0x45, 0xb6, 0x28, 0xc4, 0x24, 0xc0, 0x02, 0x5a, 0xb6, 0x99,
	0xaa, 0x5c, 0x72, 0xcb, 0x21, 0x3f, 0x20, 0x97, 0x9c, 0xf3, 0x0b, 0xf2, 0x3f, 0xf2, 0x53, 0x52,
	0xb9, 0xe5, 0x94, 0x42, 0x2f, 0x40, 0x63, 0x21, 0x01, 0xda, 0xce, 0x94, 0x0f, 0x39, 0x49, 0xfd,
	0x96, 0xaf, 0xbf, 0x7e, 0xfd, 0xfa, 0x75, 0x37, 0x9a, 0xb0, 0x8a, 0x87, 0xe6, 0x67, 0x78, 0x68,
	0x1e, 0x0e, 0x1d, 0x9b, 0xda, 0x68, 0x89, 0xfd, 0xe9, 0xd8, 0xfd, 0xf2, 0x5a, 0xc7, 0x76, 0xc8,
	0x67, 0x6d, 0xc7, 0xb6, 0xb8, 0xaa, 0xbc, 0xc1, 0x04, 0xc7, 0xb6, 0x45, 0x1d, 0xdc, 0xa1, 0x5c,
	0xa8, 0xfd, 0x3b, 0x0f, 0x0b, 0x06, 0xa1, 0xf7, 0x8e, 0x85, 0xb6, 0x61, 0xc1, 0x21, 0xee, 0x7d,
	0x9f, 0xee, 0xe4, 0xf6, 0x73, 0x07, 0x4b, 0x86, 0x68, 0x21, 0x1d, 0xe6, 0x3a, 0x76, 0x97, 0xec,
	0xe4, 0xf7, 0x73, 0x07, 0x45, 0xfd, 0xd1, 0xa1, 0xec, 0xe1, 0x90, 0xfb, 0x1d, 0x3a, 0xc4, 0x1d,
	0xda, 0x96, 0x4b, 0xae, 0x3d, 0x2b, 0x83, 0xd9, 0xa2, 0x1d, 0x58, 0x1c, 0x10, 0xd7, 0xc5, 0x3d,
	0xb2, 0x33, 0xbb, 0x9f, 0x3b, 0x28, 0x18, 0xb2, 0xa9, 0xfd, 0x29, 0x0f, 0xab, 0x21, 0x0f, 0xb4,
	0x02, 0x8b, 0xad, 0x8b, 0xe3, 0xe3, 0x5a, 0xab, 0x55, 0x9a, 0x41, 0x05, 0x58, 0x6a, 0xd5, 0x4f,
	0x6b, 0x86, 0x71, 0x6e, 0x94, 0x72, 0xe8, 0x03, 0x78, 0x70, 0x7c, 0xde, 0x68, 0x1b, 0x95, 0xe3,
	0xf6, 0xf5, 0x65, 0xe5, 0x69, 0xfd, 0xa4, 0xd2, 0xae, 0x5d, 0x73, 0x65, 0x1e, 0x6d, 0x03, 0xf2,
	0x95, 0xb5, 0x6f, 0xa4, 0x7c, 0x16, 0x21, 0x28, 0x56, 0x2b, 0x8d, 0x93, 0xab, 0x7a, 0xfb, 0x4c,
	0xc8, 0xe6, 0xd0, 0x43, 0xd8, 0x3a, 0xb9, 0x68, 0x5e, 0xb7, 0x8d, 0x4a, 0xa3, 0x55, 0x39, 0x6e,
	0xd7, 0xcf, 0x1b, 0x42, 0x35, 0x8f, 0xd6, 0x60, 0xa5, 0x5d, 0x69, 0x9e, 0xb7, 0x84, 0x60, 0x01,
	0xed, 0xc1, 0xc3, 0xf6, 0xf9, 0xf9, 0x75, 0xb5, 0x7e, 0x9a, 0x60, 0xbf, 0x88, 0xf6, 0x61, 0x37,
	0x24, 0xfe, 0xa6, 0x59, 0x37, 0x2a, 0x8a, 0xc5, 0x92, 0x87, 0xd8, 0xaa, 0x19, 0x97, 0x35, 0xe3,
	0xba, 0x7a, 0xd1, 0x7a, 0x5e, 0x5a, 0xf6, 0x04, 0xe7, 0xed, 0xb3, 0x9a, 0x21, 0x2c, 0x36, 0xb5,
	0xa7, 0x50, 0xac, 0xf6, 0xed, 0xce, 0x0b, 0x83, 0xdc, 0x12, 0x87, 0x58, 0x1d, 0x82, 0x3e, 0x80,
	0xe5, 0x1b, 0x4f, 0x72, 0x6d, 0xdd, 0x0f, 0x58, 0xfc, 0x67, 0x8d, 0x25, 0x26, 0x68, 0xdc, 0x0f,
	0xd0, 0x1e, 0x00, 0x57, 0xde, 0x61, 0xf7, 0x8e, 0xcd, 0x43, 0xc1, 0xe0, 0xe6, 0x67, 0xd8, 0xbd,
	0xd3, 0x7e, 0x03, 0x2b, 0x57, 0x26, 0xb5, 0x88, 0xeb, 0x3e, 0x35, 0x5d, 0x8a, 0x3e, 0x83, 0xe5,
	0x57, 0xbc, 0x49, 0xdc, 0x9d, 0xdc, 0xfe, 0xec, 0xc1, 0x8a, 0xbe, 0x1e, 0x4c, 0x9a, 0xb0, 0x34,
	0x02, 0x1b, 0xed, 0x08, 0x0a, 0x4d, 0xc7, 0x1e, 0xda, 0x2e, 0xee, 0x33, 0x80, 0xc7, 0xb0, 0x3c,
	0x14, 0x6d, 0x09, 0x80, 0x02, 0x00, 0x69, 0x6a, 0x04, 0x46, 0x1e, 0x42, 0xed, 0x75, 0xe7, 0x0e,
	0x5b, 0x3d, 0x22, 0x11, 0x88, 0x68, 0x27, 0x20, 0x48, 0x53, 0x23, 0x30, 0xd2, 0x1a, 0x50, 0xac,
	0xb8, 0x2e, 0xa1, 0x75, 0xd7, 0xbd, 0xe7, 0x18, 0xbf, 0x06, 0xc0, 0xbe, 0x44, 0x80, 0xec, 0x06,
	0x20, 0x81, 0xb5, 0xcc, 0x68, 0x43, 0xb1, 0xd7, 0x74, 0x58, 0x66, 0x11, 0x66, 0x50, 0x1f, 0xc3,
	0x3c, 0x8b, 0x96, 0x40, 0x59, 0x0b, 0x50, 0xf8, 0x2c, 0x70, 0xad, 0xf6, 0x5b, 0x58, 0x6b, 0x3b,
	0xd8, 0x72, 0x71, 0x87, 0x9a, 0xb6, 0xc5, 0x3c, 0x7f, 0x0e, 0x2b, 0x34, 0x10, 0x09, 0xff, 0xad,
	0xc0, 0x5f, 0xb1, 0x37, 0x54, 0x4b, 0xed, 0x31, 0x2c, 0x35, 0xec, 0x2e, 0x1f, 0xc9, 0x47, 0x30,
	0x6f, 0xd9, 0x5d, 0x3f, 0x12, 0xc5, 0xc0, 0xdd, 0x33, 0x31, 0xb8, 0x52, 0xfb, 0x1c, 0xe6, 0xbc,
	0x26, 0xfa, 0x11, 0x2c, 0xe2, 0x6e, 0xd7, 0x21, 0xae, 0xcb, 0xf2, 0x20, 0x34, 0x79, 0x15, 0xae,
	0x30, 0xa4, 0x85, 0xf6, 0x53, 0x58, 0x14, 0x32, 0x84, 0x60, 0xee, 0xce, 0x76, 0xf9, 0xe2, 0x2d,
	0x18, 0xec, 0x7f, 0x4f, 0x36, 0xb4, 0x1d, 0xca, 0x52, 0x66, 0xde, 0x60, 0xff, 0x6b, 0x45, 0x28,
	0xd4, 0x06, 0x43, 0x3a, 0x7a, 0x26, 0x16, 0xe4, 0x87, 0xb0, 0xda, 0xb8, 0x1f, 0xdc, 0x10, 0x47,
	0x08, 0x50, 0x09, 0x66, 0x83, 0x24, 0xf4, 0xfe, 0xd5, 0x3e, 0x82, 0x42, 0x75, 0x44, 0x89, 0x2b,
	0x2d, 0x36, 0x61, 0xfe, 0x25, 0xee, 0xb3, 0x59, 0xf1, 0xfa, 0xe2, 0x0d, 0x6d, 0x00, 0x2b, 0x6d,
	0x73, 0x40, 0xa4, 0xd1, 0x63, 0xd8, 0xb8, 0x21, 0x3d, 0xd3, 0xaa, 0x5b, 0xcf, 0xcc, 0x7e, 0xdf,
	0x74, 0x49, 0xc7, 0xb6, 0xba, 0xae, 0x80, 0x4d, 0x52, 0xa1, 0x1f, 0xc3, 0x3a, 0xb1, 0xba, 0x11,
	0xfb, 0x3c, 0xb3, 0x8f, 0x2b, 0xb4, 0x23, 0x00, 0x31, 0xc3, 0x03, 0x93, 0xa2, 0x32, 0x2c, 0xb9,
	0x14, 0x3b, 0xb4, 0x11, 0x2c, 0x1f, 0xd9, 0xf6, 0x0a, 0x1b, 0xb1, 0xba, 0x9e, 0x86, 0x83, 0x89,
	0x96, 0xd6, 0x86, 0x52, 0x68, 0xbe, 0x3d, 0x9c, 0x8f, 0x60, 0x55, 0x99, 0xc6, 0x7a, 0x57, 0x0c,
	0x31, 0x2c, 0xf4, 0x7a, 0xeb, 0x7b, 0xe6, 0x01, 0xa6, 0xdf, 0xd6, 0x06, 0x50, 0xaa, 0x74, 0x3a,
	0xf6, 0xbd, 0x45, 0x9b, 0xb8, 0x67, 0x5a, 0x98, 0x92, 0x2e, 0x9b, 0x53, 0x2e, 0x4b, 0x98, 0x53,
	0xae, 0x30, 0xa4, 0x85, 0x47, 0xd7, 0xbe, 0xbd, 0x75, 0x09, 0x95, 0x74, 0x79, 0xcb, 0x8b, 0x3a,
	0xeb, 0x84, 0x55, 0xd4, 0x59, 0x83, 0x37, 0xb4, 0x3f, 0xc2, 0xa6, 0x17, 0x75, 0xbf, 0x2f, 0x19,
	0x7e, 0x2f, 0x73, 0x83, 0xd9, 0x10, 0xdd, 0xaa, 0x99, 0x1b, 0x28, 0x0d, 0xd5, 0x72, 0xca, 0xee,
	0xff, 0x3c, 0x07, 0xeb, 0x62, 0x04, 0x0d, 0x42, 0x25, 0xc6, 0x3e, 0xac, 0xdc, 0x3a, 0x84, 0x34,
	0x08, 0xbd, 0x70, 0x49, 0x57, 0x4c, 0x88, 0x2a, 0x42, 0x1a, 0x14, 0x44, 0x93, 0xc5, 0x5d, 0xf4,
	0x15, 0x92, 0x79, 0x9b, 0x88, 0x44, 0xe0, 0x7d, 0xca, 0xa6, 0x17, 0x7f, 0xdf, 0x73, 0x8e, 0xc7,
	0xdf, 0xf7, 0xfa, 0x1a, 0x0a, 0xac, 0x0e, 0x48, 0xd7, 0x79, 0xb6, 0xe8, 0x7e, 0x12, 0x0b, 0x78,
	0x40, 0x97, 0xd7, 0x12, 0x61, 0x5f, 0xb3, 0xa8, 0x33, 0x32, 0x42, 0x10, 0xa8, 0x0d, 0xab, 0xb2,
	0xcd, 0xfb, 0x5c, 0x60, 0x98, 0x87, 0x59, 0x30, 0x99, 0x03, 0x07, 0x0d, 0x83, 0x78, 0xa9, 0xd6,
	0xb6, 0x29, 0xee, 0xfb, 0xa8, 0x8b, 0x6c, 0x24, 0x61, 0x21, 0xfa, 0x04, 0x8a, 0x52, 0x70, 0x45,
	0xcc, 0xde, 0x1d, 0xdd, 0x59, 0x62, 0x66, 0x11, 0x69, 0xf9, 0x4b, 0x58, 0x8f, 0x0d, 0xc3, 0x5b,
	0xca, 0x2f, 0xc8, 0x88, 0xc5, 0x7f, 0xd9, 0xf0, 0xfe, 0x0d, 0x96, 0x2e, 0x0f, 0x38, 0x6f, 0xfc,
	0x32, 0xff, 0x45, 0xae, 0x7c, 0x04, 0x28, 0xce, 0x79, 0x1a, 0x04, 0xed, 0x3f, 0xf3, 0xb0, 0x2d,
	0xb3, 0x99, 0xb8, 0xf6, 0xbd, 0xd3, 0x21, 0xef, 0x43, 0x42, 0x5c, 0x26, 0x26, 0x84, 0x1e, 0x5f,
	0x81, 0x61, 0xce, 0xa9, 0x59, 0xf1, 0x3c, 0x39, 0x2b, 0x3e, 0xcf, 0x0c, 0xfc, 0x3d, 0xa5, 0x06,
	0x7a, 0x04, 0x50, 0xb3, 0x88, 0xd3, 0x1b, 0xb1, 0xe1, 0xaf, 0x32, 0x1b, 0x45, 0xe2, 0x4d, 0x0e,
	0x6f, 0xf1, 0xbe, 0x8a, 0x7c, 0x72, 0x14, 0x11, 0xfa, 0x21, 0x94, 0x18, 0xa6, 0x6a, 0xb6, 0xc6,
	0xcc, 0x62, 0x72, 0xaf, 0x8a, 0x2b, 0x32, 0x41, 0xac, 0xc4, 0xab, 0x78, 0x4c, 0xe1, 0xf5, 0xed,
	0x52, 0xdb, 0xc1, 0x3d, 0xc2, 0xc8, 0x6d, 0xf1, 0xbe, 0x15, 0x91, 0x97, 0x18, 0xa2, 0xc9, 0xfb,
	0xdd, 0xe6, 0x89, 0xa1, 0xca, 0xde, 0x87, 0xe4, 0x3f, 0x82, 0x52, 0xac, 0x06, 0x07, 0xa5, 0x34,
	0x97, 0x5c, 0x4a, 0xf3, 0x6a, 0x29, 0x7d, 0x01, 0x1b, 0x35, 0xec, 0x8e, 0xd8, 0x96, 0x74, 0x1b,
	0x6c, 0xc7, 0x8f, 0x00, 0x86, 0xd8, 0x75, 0x9b, 0x77, 0x0e, 0x76, 0xe5, 0x8e, 0xab, 0x48, 0xd0,
	0x2e, 0x2c, 0x53, 0x5b, 0x1c, 0x02, 0xe4, 0xd9, 0xd0, 0x17, 0x78, 0x14, 0xf0, 0x80, 0x6d, 0x3c,
	0x7c, 0xc5, 0x88, 0x96, 0x46, 0x61, 0x57, 0xed, 0xac, 0x3a, 0x6a, 0x3a, 0xe6, 0x4b, 0x4c, 0x89,
	0xda, 0x2b, 0x97, 0x3c, 0x11, 0x11, 0xf0, 0x7a, 0xf5, 0x25, 0x6f, 0xd8, 0xeb, 0x5f, 0x72, 0xb0,
	0xa9, 0x76, 0x6b, 0x88, 0x8b, 0x40, 0xfc, 0x9c, 0x95, 0xcb, 0x76, 0xce, 0x42, 0x07, 0xfe, 0xa5,
	0x25, 0xcf, 0x7c, 0x4a, 0xd1, 0xeb, 0x89, 0x7f, 0x8d, 0x41, 0x30, 0x47, 0x5f, 0x9b, 0x5d, 0x71,
	0x1f, 0x61, 0xff, 0x6b, 0x2d, 0x78, 0x20, 0x28, 0x37, 0x9d, 0x27, 0x64, 0xd4, 0xc4, 0xa6, 0x1f,
	0xf6, 0x9d, 0xf0, 0x31, 0x6c, 0xd9, 0x3f, 0x73, 0x45, 0x42, 0x93, 0x67, 0x4a, 0x45, 0xa2, 0xfd,
	0x23, 0x07, 0x9b, 0x0a, 0xdf, 0xda, 0x6b, 0x4a, 0x2c, 0xc6, 0xf5, 0x8d, 0x07, 0x29, 0xa9, 0xe7,
	0x03, 0xea, 0xe8, 0x53, 0x58, 0xeb, 0xd8, 0x96, 0x4b, 0xb1, 0x45, 0xaf, 0x45, 0x04, 0x66, 0xf7,
	0x67, 0x0f, 0x0a, 0x46, 0x51, 0x8a, 0x0d, 0x3e, 0xee, 0x20, 0x42, 0x73, 0x93, 0x23, 0xa4, 0xfd,
	0x3d, 0x27, 0xae, 0x25, 0x01, 0xe5, 0x2a, 0x14, 0x14, 0x22, 0xf2, 0x04, 0xfb, 0x28, 0x91, 0xb3,
	0xef, 0x65, 0x84, 0x7c, 0xd0, 0x17, 0x50, 0x10, 0xb7, 0x17, 0x82, 0xbb, 0xc4, 0x11, 0x13, 0xb5,
	0x15, 0x39, 0x84, 0x9f, 0x31, 0xa5, 0xb1, 0x72, 0x13, 0x34, 0xbc, 0x39, 0x60, 0x4d, 0x7f, 0xd6,
	0x64, 0x53, 0x3b, 0x01, 0xe4, 0x1f, 0xef, 0x03, 0xb6, 0x87, 0xe1, 0x73, 0xfe, 0x4e, 0xa4, 0x8b,
	0x80, 0xa0, 0x38, 0xf0, 0x7f, 0x07, 0x3b, 0x91, 0x03, 0x7f, 0x80, 0x75, 0x94, 0x74, 0xf2, 0x4f,
	0x1b, 0xb8, 0xea, 0xa2, 0xff, 0xf3, 0x31, 0x2c, 0x5c, 0xe1, 0x7e, 0x9f, 0x50, 0xf4, 0x33, 0x80,
	0x53, 0x42, 0xc5, 0x76, 0x80, 0xe2, 0x87, 0xbf, 0x72, 0x5c, 0xa4, 0xcd, 0xa0, 0x2f, 0xa0, 0x18,
	0x78, 0x55, 0x47, 0xf5, 0x6e, 0x66, 0xcf, 0x33, 0x58, 0x3f, 0x76, 0x08, 0xa6, 0x44, 0x61, 0x89,
	0xca, 0x11, 0xf2, 0xb7, 0xc4, 0x91, 0x57, 0xa7, 0x72, 0x72, 0x16, 0x6a, 0x33, 0xc8, 0x00, 0x14,
	0x43, 0xd2, 0x27, 0x42, 0xa5, 0xc4, 0x48, 0x9b, 0x41, 0x15, 0xd8, 0xac, 0x3a, 0x36, 0xee, 0x76,
	0xb0, 0x4b, 0x55, 0x82, 0xc9, 0x24, 0xca, 0xb1, 0x84, 0xd5, 0x66, 0x50, 0x1d, 0x56, 0x2f, 0x86,
	0x5d, 0x4c, 0x89, 0x8c, 0xe9, 0x0f, 0x62, 0x61, 0xe0, 0xfa, 0xf4, 0x11, 0x9e, 0x42, 0xa1, 0xe5,
	0x47, 0xb9, 0xde, 0x45, 0x0a, 0x7f, 0x55, 0x9e, 0x0e, 0xd4, 0x82, 0x62, 0x88, 0x93, 0x9e, 0x4e,
	0x2a, 0x3d, 0x56, 0x4f, 0x01, 0x5d, 0xda, 0x94, 0x88, 0x5b, 0xbb, 0x1c, 0xed, 0x5e, 0xe0, 0xa7,
	0x68, 0xb3, 0xcc, 0xa6, 0x08, 0x5b, 0x8b, 0x50, 0x6a, 0x5a, 0x3d, 0x95, 0x61, 0x48, 0x31, 0x05,
	0xc3, 0x4b, 0xd8, 0x88, 0x33, 0xd4, 0xd3, 0x28, 0xa6, 0xe3, 0xd6, 0xa1, 0xc4, 0x33, 0x2f, 0xb8,
	0xe9, 0xa3, 0x89, 0xf7, 0xff, 0x49, 0x33, 0xb3, 0x1e, 0x85, 0xd2, 0x53, 0xb0, 0xb2, 0xf0, 0x13,
	0xb1, 0x14, 0x43, 0x53, 0x63, 0x29, 0x44, 0x59, 0x53, 0xd0, 0xcf, 0x1c, 0xe1, 0xa7, 0xa7, 0x63,
	0x65, 0xe2, 0x27, 0x06, 0x3d, 0x76, 0x89, 0x70, 0x7d, 0x26, 0x7e, 0x21, 0x28, 0x3d, 0x1d, 0x6b,
	0x0a, 0x7e, 0xe3, 0xe3, 0x37, 0x35, 0xbf, 0x09, 0xf1, 0x7b, 0x13, 0x7e, 0xb2, 0xb6, 0xb1, 0xfc,
	0x50, 0x31, 0x43, 0x8a, 0x4c, 0xfc, 0x42, 0x1e, 0x7a, 0x3a, 0x56, 0x3a, 0xbf, 0xe7, 0xb0, 0xd5,
	0xc4, 0x0e, 0x35, 0x3b, 0xe6, 0x30, 0xbc, 0x48, 0x3e, 0x55, 0xbe, 0xd5, 0x25, 0x19, 0xa4, 0xf3,
	0xed, 0xc0, 0x76, 0xa2, 0xa7, 0x9e, 0x1d, 0x3b, 0x53, 0x7c, 0xbf, 0x72, 0x08, 0xf9, 0x03, 0xa9,
	0xe2, 0x3e, 0xb6, 0x3a, 0x44, 0x8d, 0x49, 0x48, 0x91, 0x29, 0xbe, 0x21, 0x0f, 0x3d, 0x1d, 0x2b,
	0x9d, 0xdf, 0x33, 0x58, 0xbb, 0xb0, 0x6e, 0x43, 0x0c, 0x3f, 0x54, 0xaa, 0x65, 0x58, 0x95, 0xce,
	0xf1, 0x0a, 0x4a, 0x11, 0x1f, 0x3d, 0x0b, 0x5e, 0xb6, 0x3a, 0x24, 0x9c, 0x63, 0x79, 0x1a, 0x52,
	0x64, 0xab, 0x43, 0xaa, 0x87, 0x9e, 0x8e, 0x95, 0x29, 0x8e, 0x57, 0x26, 0xbd, 0xeb, 0x3a, 0xf8,
	0x55, 0x42, 0x1c, 0x23, 0xaa, 0x4c, 0x71, 0x8c, 0xf8, 0xe8, 0x59, 0xf0, 0xd2, 0x79, 0xd6, 0x60,
	0x45, 0x6c, 0xdf, 0x2c, 0x8a, 0x7b, 0xd1, 0x9d, 0x31, 0x63, 0x0c, 0xcf, 0xa1, 0xa0, 0xd8, 0xeb,
	0x69, 0x38, 0xe9, 0xbc, 0xda, 0x50, 0x94, 0x9f, 0xdc, 0x79, 0x0d, 0x43, 0xfb, 0xf1, 0x8f, 0xf1,
	0x53, 0x57, 0xb7, 0x4b, 0x58, 0x93, 0xbe, 0x95, 0xe1, 0xd0, 0xb1, 0x5f, 0x86, 0x66, 0x25, 0xa2,
	0x7a, 0x33, 0xb6, 0x27, 0xa4, 0x4f, 0x92, 0xd9, 0x72, 0xcd, 0x54, 0xa7, 0x20, 0xa8, 0xde, 0x8f,
	0x5a, 0xfc, 0xca, 0xaf, 0xee, 0xdc, 0x81, 0x74, 0xba, 0xb1, 0x07, 0x7e, 0xec, 0xc3, 0xb6, 0x3a,
	0xf6, 0x88, 0x6a, 0x0a, 0xdc, 0x06, 0xac, 0xb4, 0x48, 0xbf, 0x2f, 0x69, 0xee, 0xa9, 0x07, 0x49,
	0x5f, 0x3c, 0x5d, 0x2c, 0xe5, 0x53, 0x49, 0x7c, 0xe6, 0xc3, 0x9a, 0x37, 0x43, 0xad, 0x5b, 0xbf,
	0x27, 0x1d, 0x9a, 0x84, 0xca, 0x35, 0x53, 0xa0, 0x7e, 0x03, 0x25, 0xe9, 0x2b, 0x97, 0x20, 0xd2,
	0xe2, 0xb8, 0x52, 0x37, 0x05, 0xf2, 0xef, 0x60, 0x43, 0x7a, 0xab, 0x97, 0x85, 0x8f, 0xe3, 0xe0,
	0x8a, 0x7a, 0x0a, 0xfc, 0x5f, 0xc0, 0xb2, 0x77, 0xf3, 0x6b, 0xd8, 0x5d, 0xe2, 0xa2, 0x6d, 0x05,
	0x55, 0x79, 0x24, 0x29, 0xa3, 0xf0, 0x9b, 0x8d, 0xe7, 0xc0, 0xae, 0x0e, 0xdb, 0xde, 0x05, 0xcd,
	0xdf, 0xfd, 0xaa, 0xa3, 0x09, 0x57, 0xbc, 0x9d, 0xa4, 0xf3, 0xa6, 0x00, 0x7a, 0x02, 0x28, 0xb8,
	0xe9, 0xc9, 0xcf, 0x85, 0x49, 0x20, 0xfb, 0x69, 0x1f, 0x17, 0x59, 0xc1, 0xdd, 0x88, 0xb0, 0x6a,
	0xe0, 0x01, 0x51, 0x87, 0xa6, 0x3e, 0xe6, 0x94, 0x27, 0x9e, 0x83, 0xd9, 0x2d, 0x74, 0xe5, 0x94,
	0xd0, 0x86, 0xfd, 0x8a, 0xdd, 0xa1, 0xc7, 0x46, 0x28, 0xfa, 0xa8, 0xa6, 0xcd, 0xa0, 0x2a, 0x14,
	0x14, 0x4f, 0x7d, 0xac, 0xeb, 0xd8, 0x7b, 0xba, 0x36, 0x83, 0x7e, 0x05, 0xab, 0xa7, 0x84, 0x32,
	0x71, 0x75, 0xd4, 0xb8, 0x1f, 0xa0, 0x07, 0xca, 0x4c, 0xa8, 0xcf, 0x56, 0x49, 0x04, 0x6a, 0xec,
	0x02, 0x1d, 0x38, 0xeb, 0xe3, 0xbd, 0x27, 0x71, 0x68, 0xc1, 0xde, 0x29, 0xa1, 0xa1, 0xec, 0x62,
	0x17, 0xf2, 0xaa, 0x7c, 0x9f, 0x1d, 0x8b, 0x3a, 0x4e, 0xc1, 0xd2, 0xae, 0x10, 0x70, 0xab, 0x77,
	0xc7, 0x4e, 0x4f, 0x62, 0x5c, 0x37, 0x02, 0x57, 0xf6, 0xb9, 0xb2, 0x41, 0x5e, 0x53, 0xb4, 0x19,
	0xb1, 0xe4, 0x9f, 0x46, 0x37, 0x62, 0x52, 0x96, 0x71, 0x4f, 0x61, 0x33, 0x01, 0x43, 0x1f, 0x03,
	0xb2, 0x9b, 0x00, 0x12, 0xde, 0x3b, 0x55, 0x46, 0x98, 0x12, 0x97, 0x4e, 0x8c, 0xcb, 0x18, 0x52,
	0xe7, 0x21, 0x52, 0x12, 0x66, 0xc2, 0xac, 0xa5, 0xf3, 0x42, 0xe1, 0x99, 0x9b, 0x18, 0xea, 0xb1,
	0x7b, 0xfa, 0xd7, 0x50, 0x3c, 0x21, 0xc3, 0xbe, 0x3d, 0x92, 0xcb, 0x42, 0xad, 0xed, 0xbc, 0x00,
	0xb7, 0x06, 0xd8, 0x99, 0xa6, 0x5e, 0x1e, 0xb1, 0x55, 0xe5, 0xe3, 0x8d, 0xa3, 0xa4, 0x8c, 0x3c,
	0xd4, 0x03, 0xcb, 0xca, 0xb5, 0xb6, 0x63, 0xf6, 0x7a, 0xc1, 0xa7, 0x17, 0x14, 0xea, 0x96, 0xa9,
	0xa6, 0xa7, 0xb5, 0xea, 0xc5, 0xf0, 0x4a, 0xfe, 0x36, 0x60, 0xec, 0x9a, 0xdd, 0x8a, 0x5d, 0xb0,
	0xc4, 0x1c, 0x56, 0x38, 0x82, 0xdc, 0xea, 0xc7, 0x23, 0x6c, 0xc7, 0xcf, 0x05, 0x02, 0xa2, 0x09,
	0x3b, 0xa7, 0x24, 0x78, 0x3d, 0x0d, 0xfd, 0x36, 0xa1, 0xac, 0x5e, 0x40, 0xc2, 0x9f, 0xdb, 0x27,
	0x20, 0x7e, 0x09, 0x6b, 0x1e, 0xa2, 0x10, 0x4e, 0x4c, 0x82, 0x84, 0x5f, 0x3a, 0x04, 0xa3, 0x92,
	0x3b, 0x4d, 0xa6, 0x51, 0xa9, 0xbf, 0x88, 0x88, 0x8f, 0x2a, 0xf4, 0x7b, 0x89, 0x8c, 0xa3, 0x8a,
	0x20, 0xf2, 0x51, 0x49, 0x61, 0xd6, 0x51, 0x49, 0x7b, 0x76, 0x75, 0xf0, 0x96, 0xc7, 0xf1, 0x1d,
	0x36, 0xad, 0x26, 0x76, 0xf0, 0x80, 0x50, 0xe2, 0x8c, 0x1f, 0xda, 0x43, 0x25, 0xe7, 0xc3, 0x2e,
	0x6c, 0x2b, 0x5c, 0x0f, 0x6d, 0x3a, 0x6c, 0x58, 0x19, 0x0a, 0x7e, 0x6c, 0x2b, 0x6c, 0x43, 0x59,
	0x0d, 0x53, 0x04, 0x71, 0x52, 0xa0, 0x26, 0xa1, 0xd6, 0xc4, 0x03, 0x96, 0x7a, 0x82, 0x18, 0xc7,
	0x6e, 0x42, 0xd1, 0x7e, 0xc2, 0x36, 0x7c, 0xaf, 0x52, 0x3e, 0xc3, 0xa6, 0x45, 0x89, 0xe5, 0xdd,
	0x31, 0xda, 0x66, 0x78, 0x77, 0xcd, 0x0a, 0x76, 0x16, 0x2d, 0x4e, 0x2d, 0xb3, 0x67, 0xa1, 0x87,
	0x89, 0x6b, 0xd4, 0x53, 0x4d, 0xfa, 0xac, 0xb7, 0x11, 0x47, 0xd2, 0x27, 0x41, 0x65, 0xf9, 0x48,
	0x2b, 0x3f, 0x1f, 0xc9, 0x37, 0x9d, 0x31, 0xa9, 0x35, 0x46, 0xce, 0xaf, 0x42, 0xea, 0x63, 0x8f,
	0x5a, 0x34, 0x13, 0x1e, 0xba, 0x54, 0x4e, 0x49, 0x6f, 0x44, 0xda, 0x0c, 0xc2, 0xb0, 0x95, 0xf8,
	0x68, 0x85, 0x3e, 0x49, 0x76, 0x8d, 0xbe, 0x6a, 0x65, 0xe8, 0xa2, 0xe1, 0xad, 0x29, 0x8b, 0x38,
	0xc9, 0x03, 0x0f, 0x4d, 0xed, 0x87, 0xb1, 0xdf, 0xe5, 0x44, 0x1f, 0x91, 0xd8, 0x61, 0x6c, 0x3b,
	0x3c, 0x35, 0x75, 0xeb, 0xd6, 0x9e, 0xb8, 0x54, 0x93, 0x67, 0xcd, 0x73, 0xd3, 0x66, 0xf4, 0xbf,
	0x2d, 0x42, 0x91, 0xbf, 0x29, 0xb4, 0xec, 0xbe, 0xd9, 0x35, 0xe9, 0xe8, 0x7b, 0x7f, 0x5b, 0x78,
	0xfb, 0x2d, 0xe2, 0x3d, 0xaf, 0x15, 0xff, 0x3f, 0xf0, 0xfe, 0x4f, 0x0e, 0xbc, 0xef, 0xe8, 0x2c,
	0xf6, 0x6e, 0x17, 0xd4, 0xbb, 0x5e, 0xef, 0xfa, 0xbf, 0xf2, 0xb0, 0xc6, 0x17, 0x28, 0x0b, 0xa8,
	0xeb, 0x6d, 0x34, 0x06, 0x3c, 0x08, 0x53, 0x76, 0xbf, 0x72, 0xec, 0x41, 0xfb, 0xce, 0x74, 0xd5,
	0x1c, 0x8d, 0xfe, 0x68, 0x6c, 0x0c, 0x6f, 0x91, 0xa4, 0xdf, 0xb1, 0xd3, 0x44, 0x12, 0xa6, 0x3e,
	0x11, 0x54, 0x1b, 0x0b, 0xaa, 0x26, 0x40, 0x13, 0xb6, 0x22, 0xe8, 0x6d, 0xfb, 0xed, 0xf8, 0x7e,
	0x1b, 0x9d, 0x36, 0x81, 0xf8, 0x0e, 0xd8, 0xea, 0x7f, 0xcd, 0xc3, 0xd2, 0x09, 0xa6, 0xf8, 0x06,
	0xbb, 0xc4, 0x2b, 0x2e, 0x3d, 0xb1, 0x04, 0x82, 0x5f, 0xd7, 0x66, 0x5d, 0x88, 0xbe, 0x07, 0x4b,
	0x34, 0xef, 0x32, 0x72, 0x32, 0xb2, 0xf0, 0xc0, 0xec, 0x78, 0x47, 0x41, 0xe2, 0x50, 0x73, 0x42,
	0xb9, 0xfb, 0x20, 0x90, 0xc7, 0x9c, 0xde, 0xaa, 0xaa, 0xbc, 0x4d, 0x45, 0xd0, 0x97, 0xd9, 0x4f,
	0xa6, 0x5e, 0xd9, 0xce, 0x8b, 0xea, 0x2e, 0x14, 0x6c, 0xa7, 0x77, 0x48, 0x1d, 0xdb, 0x3a, 0xc4,
	0x43, 0xb3, 0xba, 0x78, 0xea, 0x0c, 0x3b, 0x95, 0x66, 0xfd, 0xdb, 0x59, 0x3c, 0x34, 0x6f, 0x16,
	0x98, 0xeb, 0xe7, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xcf, 0x03, 0x85, 0x5f, 0x50, 0x2e, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WalletClient is the client API for Wallet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WalletClient interface {
	GetAccount(ctx context.Context, in *core.Account, opts ...grpc.CallOption) (*core.Account, error)
	GetAccountById(ctx context.Context, in *core.Account, opts ...grpc.CallOption) (*core.Account, error)
	// Please use CreateTransaction2 instead of this function.
	CreateTransaction(ctx context.Context, in *core.TransferContract, opts ...grpc.CallOption) (*core.Transaction, error)
	// Use this function instead of CreateTransaction.
	CreateTransaction2(ctx context.Context, in *core.TransferContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	BroadcastTransaction(ctx context.Context, in *core.Transaction, opts ...grpc.CallOption) (*Return, error)
	// Please use UpdateAccount2 instead of this function.
	UpdateAccount(ctx context.Context, in *core.AccountUpdateContract, opts ...grpc.CallOption) (*core.Transaction, error)
	SetAccountId(ctx context.Context, in *core.SetAccountIdContract, opts ...grpc.CallOption) (*core.Transaction, error)
	// Use this function instead of UpdateAccount.
	UpdateAccount2(ctx context.Context, in *core.AccountUpdateContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	// Please use VoteWitnessAccount2 instead of this function.
	VoteWitnessAccount(ctx context.Context, in *core.VoteWitnessContract, opts ...grpc.CallOption) (*core.Transaction, error)
	// modify the consume_user_resource_percent
	UpdateSetting(ctx context.Context, in *core.UpdateSettingContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	// Use this function instead of VoteWitnessAccount.
	VoteWitnessAccount2(ctx context.Context, in *core.VoteWitnessContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	// Please use CreateAssetIssue2 instead of this function.
	CreateAssetIssue(ctx context.Context, in *core.AssetIssueContract, opts ...grpc.CallOption) (*core.Transaction, error)
	// Use this function instead of CreateAssetIssue.
	CreateAssetIssue2(ctx context.Context, in *core.AssetIssueContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	// Please use UpdateWitness2 instead of this function.
	UpdateWitness(ctx context.Context, in *core.WitnessUpdateContract, opts ...grpc.CallOption) (*core.Transaction, error)
	// Use this function instead of UpdateWitness.
	UpdateWitness2(ctx context.Context, in *core.WitnessUpdateContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	// Please use CreateAccount2 instead of this function.
	CreateAccount(ctx context.Context, in *core.AccountCreateContract, opts ...grpc.CallOption) (*core.Transaction, error)
	// Use this function instead of CreateAccount.
	CreateAccount2(ctx context.Context, in *core.AccountCreateContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	// Please use CreateWitness2 instead of this function.
	CreateWitness(ctx context.Context, in *core.WitnessCreateContract, opts ...grpc.CallOption) (*core.Transaction, error)
	// Use this function instead of CreateWitness.
	CreateWitness2(ctx context.Context, in *core.WitnessCreateContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	// Please use TransferAsset2 instead of this function.
	TransferAsset(ctx context.Context, in *core.TransferAssetContract, opts ...grpc.CallOption) (*core.Transaction, error)
	// Use this function instead of TransferAsset.
	TransferAsset2(ctx context.Context, in *core.TransferAssetContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	// Please use ParticipateAssetIssue2 instead of this function.
	ParticipateAssetIssue(ctx context.Context, in *core.ParticipateAssetIssueContract, opts ...grpc.CallOption) (*core.Transaction, error)
	// Use this function instead of ParticipateAssetIssue.
	ParticipateAssetIssue2(ctx context.Context, in *core.ParticipateAssetIssueContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	// Please use FreezeBalance2 instead of this function.
	FreezeBalance(ctx context.Context, in *core.FreezeBalanceContract, opts ...grpc.CallOption) (*core.Transaction, error)
	// Use this function instead of FreezeBalance.
	FreezeBalance2(ctx context.Context, in *core.FreezeBalanceContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	// Please use UnfreezeBalance2 instead of this function.
	UnfreezeBalance(ctx context.Context, in *core.UnfreezeBalanceContract, opts ...grpc.CallOption) (*core.Transaction, error)
	// Use this function instead of UnfreezeBalance.
	UnfreezeBalance2(ctx context.Context, in *core.UnfreezeBalanceContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	// Please use UnfreezeAsset2 instead of this function.
	UnfreezeAsset(ctx context.Context, in *core.UnfreezeAssetContract, opts ...grpc.CallOption) (*core.Transaction, error)
	// Use this function instead of UnfreezeAsset.
	UnfreezeAsset2(ctx context.Context, in *core.UnfreezeAssetContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	// Please use WithdrawBalance2 instead of this function.
	WithdrawBalance(ctx context.Context, in *core.WithdrawBalanceContract, opts ...grpc.CallOption) (*core.Transaction, error)
	// Use this function instead of WithdrawBalance.
	WithdrawBalance2(ctx context.Context, in *core.WithdrawBalanceContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	// Please use UpdateAsset2 instead of this function.
	UpdateAsset(ctx context.Context, in *core.UpdateAssetContract, opts ...grpc.CallOption) (*core.Transaction, error)
	// Use this function instead of UpdateAsset.
	UpdateAsset2(ctx context.Context, in *core.UpdateAssetContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	ProposalCreate(ctx context.Context, in *core.ProposalCreateContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	ProposalApprove(ctx context.Context, in *core.ProposalApproveContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	ProposalDelete(ctx context.Context, in *core.ProposalDeleteContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	BuyStorage(ctx context.Context, in *core.BuyStorageContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	BuyStorageBytes(ctx context.Context, in *core.BuyStorageBytesContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	SellStorage(ctx context.Context, in *core.SellStorageContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	ExchangeCreate(ctx context.Context, in *core.ExchangeCreateContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	ExchangeInject(ctx context.Context, in *core.ExchangeInjectContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	ExchangeWithdraw(ctx context.Context, in *core.ExchangeWithdrawContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	ExchangeTransaction(ctx context.Context, in *core.ExchangeTransactionContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	ListNodes(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*NodeList, error)
	GetAssetIssueByAccount(ctx context.Context, in *core.Account, opts ...grpc.CallOption) (*AssetIssueList, error)
	GetAccountResource(ctx context.Context, in *core.Account, opts ...grpc.CallOption) (*AccountResourceMessage, error)
	GetAssetIssueByName(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.AssetIssueContract, error)
	// Please use GetNowBlock2 instead of this function.
	GetNowBlock(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.Block, error)
	// Use this function instead of GetNowBlock.
	GetNowBlock2(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*BlockExtention, error)
	// Please use GetBlockByNum2 instead of this function.
	GetBlockByNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*core.Block, error)
	// Use this function instead of GetBlockByNum.
	GetBlockByNum2(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*BlockExtention, error)
	GetTransactionCountByBlockNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*NumberMessage, error)
	GetBlockById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.Block, error)
	// Please use GetBlockByLimitNext2 instead of this function.
	GetBlockByLimitNext(ctx context.Context, in *BlockLimit, opts ...grpc.CallOption) (*BlockList, error)
	// Use this function instead of GetBlockByLimitNext.
	GetBlockByLimitNext2(ctx context.Context, in *BlockLimit, opts ...grpc.CallOption) (*BlockListExtention, error)
	// Please use GetBlockByLatestNum2 instead of this function.
	GetBlockByLatestNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*BlockList, error)
	// Use this function instead of GetBlockByLatestNum.
	GetBlockByLatestNum2(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*BlockListExtention, error)
	GetTransactionById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.Transaction, error)
	DeployContract(ctx context.Context, in *core.CreateSmartContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	GetContract(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.SmartContract, error)
	TriggerContract(ctx context.Context, in *core.TriggerSmartContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	ListWitnesses(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*WitnessList, error)
	ListProposals(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*ProposalList, error)
	GetPaginatedProposalList(ctx context.Context, in *PaginatedMessage, opts ...grpc.CallOption) (*ProposalList, error)
	GetProposalById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.Proposal, error)
	ListExchanges(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*ExchangeList, error)
	GetPaginatedExchangeList(ctx context.Context, in *PaginatedMessage, opts ...grpc.CallOption) (*ExchangeList, error)
	GetExchangeById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.Exchange, error)
	GetChainParameters(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.ChainParameters, error)
	GetAssetIssueList(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*AssetIssueList, error)
	GetPaginatedAssetIssueList(ctx context.Context, in *PaginatedMessage, opts ...grpc.CallOption) (*AssetIssueList, error)
	TotalTransaction(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*NumberMessage, error)
	GetNextMaintenanceTime(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*NumberMessage, error)
	// Warning: do not invoke this interface provided by others.
	// Please use GetTransactionSign2 instead of this function.
	GetTransactionSign(ctx context.Context, in *core.TransactionSign, opts ...grpc.CallOption) (*core.Transaction, error)
	// Warning: do not invoke this interface provided by others.
	// Use this function instead of GetTransactionSign.
	GetTransactionSign2(ctx context.Context, in *core.TransactionSign, opts ...grpc.CallOption) (*TransactionExtention, error)
	// Warning: do not invoke this interface provided by others.
	CreateAddress(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*BytesMessage, error)
	// Warning: do not invoke this interface provided by others.
	EasyTransfer(ctx context.Context, in *EasyTransferMessage, opts ...grpc.CallOption) (*EasyTransferResponse, error)
	// Warning: do not invoke this interface provided by others.
	EasyTransferByPrivate(ctx context.Context, in *EasyTransferByPrivateMessage, opts ...grpc.CallOption) (*EasyTransferResponse, error)
	// Warning: do not invoke this interface provided by others.
	GenerateAddress(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*AddressPrKeyPairMessage, error)
	GetTransactionInfoById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.TransactionInfo, error)
}

type walletClient struct {
	cc *grpc.ClientConn
}

func NewWalletClient(cc *grpc.ClientConn) WalletClient {
	return &walletClient{cc}
}

func (c *walletClient) GetAccount(ctx context.Context, in *core.Account, opts ...grpc.CallOption) (*core.Account, error) {
	out := new(core.Account)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetAccountById(ctx context.Context, in *core.Account, opts ...grpc.CallOption) (*core.Account, error) {
	out := new(core.Account)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetAccountById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateTransaction(ctx context.Context, in *core.TransferContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/CreateTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateTransaction2(ctx context.Context, in *core.TransferContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/CreateTransaction2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) BroadcastTransaction(ctx context.Context, in *core.Transaction, opts ...grpc.CallOption) (*Return, error) {
	out := new(Return)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/BroadcastTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UpdateAccount(ctx context.Context, in *core.AccountUpdateContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/UpdateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) SetAccountId(ctx context.Context, in *core.SetAccountIdContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/SetAccountId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UpdateAccount2(ctx context.Context, in *core.AccountUpdateContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/UpdateAccount2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) VoteWitnessAccount(ctx context.Context, in *core.VoteWitnessContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/VoteWitnessAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UpdateSetting(ctx context.Context, in *core.UpdateSettingContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/UpdateSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) VoteWitnessAccount2(ctx context.Context, in *core.VoteWitnessContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/VoteWitnessAccount2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateAssetIssue(ctx context.Context, in *core.AssetIssueContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/CreateAssetIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateAssetIssue2(ctx context.Context, in *core.AssetIssueContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/CreateAssetIssue2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UpdateWitness(ctx context.Context, in *core.WitnessUpdateContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/UpdateWitness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UpdateWitness2(ctx context.Context, in *core.WitnessUpdateContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/UpdateWitness2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateAccount(ctx context.Context, in *core.AccountCreateContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateAccount2(ctx context.Context, in *core.AccountCreateContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/CreateAccount2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateWitness(ctx context.Context, in *core.WitnessCreateContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/CreateWitness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateWitness2(ctx context.Context, in *core.WitnessCreateContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/CreateWitness2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) TransferAsset(ctx context.Context, in *core.TransferAssetContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/TransferAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) TransferAsset2(ctx context.Context, in *core.TransferAssetContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/TransferAsset2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ParticipateAssetIssue(ctx context.Context, in *core.ParticipateAssetIssueContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/ParticipateAssetIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ParticipateAssetIssue2(ctx context.Context, in *core.ParticipateAssetIssueContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/ParticipateAssetIssue2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) FreezeBalance(ctx context.Context, in *core.FreezeBalanceContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/FreezeBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) FreezeBalance2(ctx context.Context, in *core.FreezeBalanceContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/FreezeBalance2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UnfreezeBalance(ctx context.Context, in *core.UnfreezeBalanceContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/UnfreezeBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UnfreezeBalance2(ctx context.Context, in *core.UnfreezeBalanceContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/UnfreezeBalance2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UnfreezeAsset(ctx context.Context, in *core.UnfreezeAssetContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/UnfreezeAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UnfreezeAsset2(ctx context.Context, in *core.UnfreezeAssetContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/UnfreezeAsset2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) WithdrawBalance(ctx context.Context, in *core.WithdrawBalanceContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/WithdrawBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) WithdrawBalance2(ctx context.Context, in *core.WithdrawBalanceContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/WithdrawBalance2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UpdateAsset(ctx context.Context, in *core.UpdateAssetContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/UpdateAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UpdateAsset2(ctx context.Context, in *core.UpdateAssetContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/UpdateAsset2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ProposalCreate(ctx context.Context, in *core.ProposalCreateContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/ProposalCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ProposalApprove(ctx context.Context, in *core.ProposalApproveContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/ProposalApprove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ProposalDelete(ctx context.Context, in *core.ProposalDeleteContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/ProposalDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) BuyStorage(ctx context.Context, in *core.BuyStorageContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/BuyStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) BuyStorageBytes(ctx context.Context, in *core.BuyStorageBytesContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/BuyStorageBytes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) SellStorage(ctx context.Context, in *core.SellStorageContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/SellStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ExchangeCreate(ctx context.Context, in *core.ExchangeCreateContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/ExchangeCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ExchangeInject(ctx context.Context, in *core.ExchangeInjectContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/ExchangeInject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ExchangeWithdraw(ctx context.Context, in *core.ExchangeWithdrawContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/ExchangeWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ExchangeTransaction(ctx context.Context, in *core.ExchangeTransactionContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/ExchangeTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ListNodes(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*NodeList, error) {
	out := new(NodeList)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/ListNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetAssetIssueByAccount(ctx context.Context, in *core.Account, opts ...grpc.CallOption) (*AssetIssueList, error) {
	out := new(AssetIssueList)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetAssetIssueByAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetAccountResource(ctx context.Context, in *core.Account, opts ...grpc.CallOption) (*AccountResourceMessage, error) {
	out := new(AccountResourceMessage)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetAccountResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetAssetIssueByName(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.AssetIssueContract, error) {
	out := new(core.AssetIssueContract)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetAssetIssueByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetNowBlock(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.Block, error) {
	out := new(core.Block)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetNowBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetNowBlock2(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*BlockExtention, error) {
	out := new(BlockExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetNowBlock2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetBlockByNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*core.Block, error) {
	out := new(core.Block)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetBlockByNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetBlockByNum2(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*BlockExtention, error) {
	out := new(BlockExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetBlockByNum2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetTransactionCountByBlockNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*NumberMessage, error) {
	out := new(NumberMessage)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetTransactionCountByBlockNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetBlockById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.Block, error) {
	out := new(core.Block)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetBlockById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetBlockByLimitNext(ctx context.Context, in *BlockLimit, opts ...grpc.CallOption) (*BlockList, error) {
	out := new(BlockList)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetBlockByLimitNext", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetBlockByLimitNext2(ctx context.Context, in *BlockLimit, opts ...grpc.CallOption) (*BlockListExtention, error) {
	out := new(BlockListExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetBlockByLimitNext2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetBlockByLatestNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*BlockList, error) {
	out := new(BlockList)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetBlockByLatestNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetBlockByLatestNum2(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*BlockListExtention, error) {
	out := new(BlockListExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetBlockByLatestNum2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetTransactionById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetTransactionById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) DeployContract(ctx context.Context, in *core.CreateSmartContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/DeployContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetContract(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.SmartContract, error) {
	out := new(core.SmartContract)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) TriggerContract(ctx context.Context, in *core.TriggerSmartContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/TriggerContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ListWitnesses(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*WitnessList, error) {
	out := new(WitnessList)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/ListWitnesses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ListProposals(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*ProposalList, error) {
	out := new(ProposalList)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/ListProposals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetPaginatedProposalList(ctx context.Context, in *PaginatedMessage, opts ...grpc.CallOption) (*ProposalList, error) {
	out := new(ProposalList)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetPaginatedProposalList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetProposalById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.Proposal, error) {
	out := new(core.Proposal)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetProposalById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ListExchanges(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*ExchangeList, error) {
	out := new(ExchangeList)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/ListExchanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetPaginatedExchangeList(ctx context.Context, in *PaginatedMessage, opts ...grpc.CallOption) (*ExchangeList, error) {
	out := new(ExchangeList)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetPaginatedExchangeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetExchangeById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.Exchange, error) {
	out := new(core.Exchange)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetExchangeById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetChainParameters(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.ChainParameters, error) {
	out := new(core.ChainParameters)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetChainParameters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetAssetIssueList(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*AssetIssueList, error) {
	out := new(AssetIssueList)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetAssetIssueList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetPaginatedAssetIssueList(ctx context.Context, in *PaginatedMessage, opts ...grpc.CallOption) (*AssetIssueList, error) {
	out := new(AssetIssueList)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetPaginatedAssetIssueList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) TotalTransaction(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*NumberMessage, error) {
	out := new(NumberMessage)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/TotalTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetNextMaintenanceTime(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*NumberMessage, error) {
	out := new(NumberMessage)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetNextMaintenanceTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetTransactionSign(ctx context.Context, in *core.TransactionSign, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetTransactionSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetTransactionSign2(ctx context.Context, in *core.TransactionSign, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetTransactionSign2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateAddress(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*BytesMessage, error) {
	out := new(BytesMessage)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/CreateAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) EasyTransfer(ctx context.Context, in *EasyTransferMessage, opts ...grpc.CallOption) (*EasyTransferResponse, error) {
	out := new(EasyTransferResponse)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/EasyTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) EasyTransferByPrivate(ctx context.Context, in *EasyTransferByPrivateMessage, opts ...grpc.CallOption) (*EasyTransferResponse, error) {
	out := new(EasyTransferResponse)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/EasyTransferByPrivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GenerateAddress(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*AddressPrKeyPairMessage, error) {
	out := new(AddressPrKeyPairMessage)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GenerateAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetTransactionInfoById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.TransactionInfo, error) {
	out := new(core.TransactionInfo)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetTransactionInfoById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletServer is the server API for Wallet service.
type WalletServer interface {
	GetAccount(context.Context, *core.Account) (*core.Account, error)
	GetAccountById(context.Context, *core.Account) (*core.Account, error)
	// Please use CreateTransaction2 instead of this function.
	CreateTransaction(context.Context, *core.TransferContract) (*core.Transaction, error)
	// Use this function instead of CreateTransaction.
	CreateTransaction2(context.Context, *core.TransferContract) (*TransactionExtention, error)
	BroadcastTransaction(context.Context, *core.Transaction) (*Return, error)
	// Please use UpdateAccount2 instead of this function.
	UpdateAccount(context.Context, *core.AccountUpdateContract) (*core.Transaction, error)
	SetAccountId(context.Context, *core.SetAccountIdContract) (*core.Transaction, error)
	// Use this function instead of UpdateAccount.
	UpdateAccount2(context.Context, *core.AccountUpdateContract) (*TransactionExtention, error)
	// Please use VoteWitnessAccount2 instead of this function.
	VoteWitnessAccount(context.Context, *core.VoteWitnessContract) (*core.Transaction, error)
	// modify the consume_user_resource_percent
	UpdateSetting(context.Context, *core.UpdateSettingContract) (*TransactionExtention, error)
	// Use this function instead of VoteWitnessAccount.
	VoteWitnessAccount2(context.Context, *core.VoteWitnessContract) (*TransactionExtention, error)
	// Please use CreateAssetIssue2 instead of this function.
	CreateAssetIssue(context.Context, *core.AssetIssueContract) (*core.Transaction, error)
	// Use this function instead of CreateAssetIssue.
	CreateAssetIssue2(context.Context, *core.AssetIssueContract) (*TransactionExtention, error)
	// Please use UpdateWitness2 instead of this function.
	UpdateWitness(context.Context, *core.WitnessUpdateContract) (*core.Transaction, error)
	// Use this function instead of UpdateWitness.
	UpdateWitness2(context.Context, *core.WitnessUpdateContract) (*TransactionExtention, error)
	// Please use CreateAccount2 instead of this function.
	CreateAccount(context.Context, *core.AccountCreateContract) (*core.Transaction, error)
	// Use this function instead of CreateAccount.
	CreateAccount2(context.Context, *core.AccountCreateContract) (*TransactionExtention, error)
	// Please use CreateWitness2 instead of this function.
	CreateWitness(context.Context, *core.WitnessCreateContract) (*core.Transaction, error)
	// Use this function instead of CreateWitness.
	CreateWitness2(context.Context, *core.WitnessCreateContract) (*TransactionExtention, error)
	// Please use TransferAsset2 instead of this function.
	TransferAsset(context.Context, *core.TransferAssetContract) (*core.Transaction, error)
	// Use this function instead of TransferAsset.
	TransferAsset2(context.Context, *core.TransferAssetContract) (*TransactionExtention, error)
	// Please use ParticipateAssetIssue2 instead of this function.
	ParticipateAssetIssue(context.Context, *core.ParticipateAssetIssueContract) (*core.Transaction, error)
	// Use this function instead of ParticipateAssetIssue.
	ParticipateAssetIssue2(context.Context, *core.ParticipateAssetIssueContract) (*TransactionExtention, error)
	// Please use FreezeBalance2 instead of this function.
	FreezeBalance(context.Context, *core.FreezeBalanceContract) (*core.Transaction, error)
	// Use this function instead of FreezeBalance.
	FreezeBalance2(context.Context, *core.FreezeBalanceContract) (*TransactionExtention, error)
	// Please use UnfreezeBalance2 instead of this function.
	UnfreezeBalance(context.Context, *core.UnfreezeBalanceContract) (*core.Transaction, error)
	// Use this function instead of UnfreezeBalance.
	UnfreezeBalance2(context.Context, *core.UnfreezeBalanceContract) (*TransactionExtention, error)
	// Please use UnfreezeAsset2 instead of this function.
	UnfreezeAsset(context.Context, *core.UnfreezeAssetContract) (*core.Transaction, error)
	// Use this function instead of UnfreezeAsset.
	UnfreezeAsset2(context.Context, *core.UnfreezeAssetContract) (*TransactionExtention, error)
	// Please use WithdrawBalance2 instead of this function.
	WithdrawBalance(context.Context, *core.WithdrawBalanceContract) (*core.Transaction, error)
	// Use this function instead of WithdrawBalance.
	WithdrawBalance2(context.Context, *core.WithdrawBalanceContract) (*TransactionExtention, error)
	// Please use UpdateAsset2 instead of this function.
	UpdateAsset(context.Context, *core.UpdateAssetContract) (*core.Transaction, error)
	// Use this function instead of UpdateAsset.
	UpdateAsset2(context.Context, *core.UpdateAssetContract) (*TransactionExtention, error)
	ProposalCreate(context.Context, *core.ProposalCreateContract) (*TransactionExtention, error)
	ProposalApprove(context.Context, *core.ProposalApproveContract) (*TransactionExtention, error)
	ProposalDelete(context.Context, *core.ProposalDeleteContract) (*TransactionExtention, error)
	BuyStorage(context.Context, *core.BuyStorageContract) (*TransactionExtention, error)
	BuyStorageBytes(context.Context, *core.BuyStorageBytesContract) (*TransactionExtention, error)
	SellStorage(context.Context, *core.SellStorageContract) (*TransactionExtention, error)
	ExchangeCreate(context.Context, *core.ExchangeCreateContract) (*TransactionExtention, error)
	ExchangeInject(context.Context, *core.ExchangeInjectContract) (*TransactionExtention, error)
	ExchangeWithdraw(context.Context, *core.ExchangeWithdrawContract) (*TransactionExtention, error)
	ExchangeTransaction(context.Context, *core.ExchangeTransactionContract) (*TransactionExtention, error)
	ListNodes(context.Context, *EmptyMessage) (*NodeList, error)
	GetAssetIssueByAccount(context.Context, *core.Account) (*AssetIssueList, error)
	GetAccountResource(context.Context, *core.Account) (*AccountResourceMessage, error)
	GetAssetIssueByName(context.Context, *BytesMessage) (*core.AssetIssueContract, error)
	// Please use GetNowBlock2 instead of this function.
	GetNowBlock(context.Context, *EmptyMessage) (*core.Block, error)
	// Use this function instead of GetNowBlock.
	GetNowBlock2(context.Context, *EmptyMessage) (*BlockExtention, error)
	// Please use GetBlockByNum2 instead of this function.
	GetBlockByNum(context.Context, *NumberMessage) (*core.Block, error)
	// Use this function instead of GetBlockByNum.
	GetBlockByNum2(context.Context, *NumberMessage) (*BlockExtention, error)
	GetTransactionCountByBlockNum(context.Context, *NumberMessage) (*NumberMessage, error)
	GetBlockById(context.Context, *BytesMessage) (*core.Block, error)
	// Please use GetBlockByLimitNext2 instead of this function.
	GetBlockByLimitNext(context.Context, *BlockLimit) (*BlockList, error)
	// Use this function instead of GetBlockByLimitNext.
	GetBlockByLimitNext2(context.Context, *BlockLimit) (*BlockListExtention, error)
	// Please use GetBlockByLatestNum2 instead of this function.
	GetBlockByLatestNum(context.Context, *NumberMessage) (*BlockList, error)
	// Use this function instead of GetBlockByLatestNum.
	GetBlockByLatestNum2(context.Context, *NumberMessage) (*BlockListExtention, error)
	GetTransactionById(context.Context, *BytesMessage) (*core.Transaction, error)
	DeployContract(context.Context, *core.CreateSmartContract) (*TransactionExtention, error)
	GetContract(context.Context, *BytesMessage) (*core.SmartContract, error)
	TriggerContract(context.Context, *core.TriggerSmartContract) (*TransactionExtention, error)
	ListWitnesses(context.Context, *EmptyMessage) (*WitnessList, error)
	ListProposals(context.Context, *EmptyMessage) (*ProposalList, error)
	GetPaginatedProposalList(context.Context, *PaginatedMessage) (*ProposalList, error)
	GetProposalById(context.Context, *BytesMessage) (*core.Proposal, error)
	ListExchanges(context.Context, *EmptyMessage) (*ExchangeList, error)
	GetPaginatedExchangeList(context.Context, *PaginatedMessage) (*ExchangeList, error)
	GetExchangeById(context.Context, *BytesMessage) (*core.Exchange, error)
	GetChainParameters(context.Context, *EmptyMessage) (*core.ChainParameters, error)
	GetAssetIssueList(context.Context, *EmptyMessage) (*AssetIssueList, error)
	GetPaginatedAssetIssueList(context.Context, *PaginatedMessage) (*AssetIssueList, error)
	TotalTransaction(context.Context, *EmptyMessage) (*NumberMessage, error)
	GetNextMaintenanceTime(context.Context, *EmptyMessage) (*NumberMessage, error)
	// Warning: do not invoke this interface provided by others.
	// Please use GetTransactionSign2 instead of this function.
	GetTransactionSign(context.Context, *core.TransactionSign) (*core.Transaction, error)
	// Warning: do not invoke this interface provided by others.
	// Use this function instead of GetTransactionSign.
	GetTransactionSign2(context.Context, *core.TransactionSign) (*TransactionExtention, error)
	// Warning: do not invoke this interface provided by others.
	CreateAddress(context.Context, *BytesMessage) (*BytesMessage, error)
	// Warning: do not invoke this interface provided by others.
	EasyTransfer(context.Context, *EasyTransferMessage) (*EasyTransferResponse, error)
	// Warning: do not invoke this interface provided by others.
	EasyTransferByPrivate(context.Context, *EasyTransferByPrivateMessage) (*EasyTransferResponse, error)
	// Warning: do not invoke this interface provided by others.
	GenerateAddress(context.Context, *EmptyMessage) (*AddressPrKeyPairMessage, error)
	GetTransactionInfoById(context.Context, *BytesMessage) (*core.TransactionInfo, error)
}

func RegisterWalletServer(s *grpc.Server, srv WalletServer) {
	s.RegisterService(&_Wallet_serviceDesc, srv)
}

func _Wallet_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAccount(ctx, req.(*core.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetAccountById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAccountById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetAccountById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAccountById(ctx, req.(*core.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.TransferContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/CreateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateTransaction(ctx, req.(*core.TransferContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateTransaction2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.TransferContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateTransaction2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/CreateTransaction2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateTransaction2(ctx, req.(*core.TransferContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_BroadcastTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).BroadcastTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/BroadcastTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).BroadcastTransaction(ctx, req.(*core.Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.AccountUpdateContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/UpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UpdateAccount(ctx, req.(*core.AccountUpdateContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_SetAccountId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.SetAccountIdContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).SetAccountId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/SetAccountId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).SetAccountId(ctx, req.(*core.SetAccountIdContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UpdateAccount2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.AccountUpdateContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UpdateAccount2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/UpdateAccount2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UpdateAccount2(ctx, req.(*core.AccountUpdateContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_VoteWitnessAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.VoteWitnessContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).VoteWitnessAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/VoteWitnessAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).VoteWitnessAccount(ctx, req.(*core.VoteWitnessContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UpdateSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.UpdateSettingContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UpdateSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/UpdateSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UpdateSetting(ctx, req.(*core.UpdateSettingContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_VoteWitnessAccount2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.VoteWitnessContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).VoteWitnessAccount2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/VoteWitnessAccount2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).VoteWitnessAccount2(ctx, req.(*core.VoteWitnessContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateAssetIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.AssetIssueContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateAssetIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/CreateAssetIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateAssetIssue(ctx, req.(*core.AssetIssueContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateAssetIssue2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.AssetIssueContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateAssetIssue2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/CreateAssetIssue2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateAssetIssue2(ctx, req.(*core.AssetIssueContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UpdateWitness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.WitnessUpdateContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UpdateWitness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/UpdateWitness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UpdateWitness(ctx, req.(*core.WitnessUpdateContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UpdateWitness2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.WitnessUpdateContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UpdateWitness2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/UpdateWitness2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UpdateWitness2(ctx, req.(*core.WitnessUpdateContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.AccountCreateContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateAccount(ctx, req.(*core.AccountCreateContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateAccount2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.AccountCreateContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateAccount2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/CreateAccount2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateAccount2(ctx, req.(*core.AccountCreateContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateWitness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.WitnessCreateContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateWitness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/CreateWitness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateWitness(ctx, req.(*core.WitnessCreateContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateWitness2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.WitnessCreateContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateWitness2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/CreateWitness2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateWitness2(ctx, req.(*core.WitnessCreateContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_TransferAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.TransferAssetContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).TransferAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/TransferAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).TransferAsset(ctx, req.(*core.TransferAssetContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_TransferAsset2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.TransferAssetContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).TransferAsset2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/TransferAsset2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).TransferAsset2(ctx, req.(*core.TransferAssetContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ParticipateAssetIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.ParticipateAssetIssueContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ParticipateAssetIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/ParticipateAssetIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ParticipateAssetIssue(ctx, req.(*core.ParticipateAssetIssueContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ParticipateAssetIssue2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.ParticipateAssetIssueContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ParticipateAssetIssue2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/ParticipateAssetIssue2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ParticipateAssetIssue2(ctx, req.(*core.ParticipateAssetIssueContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_FreezeBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.FreezeBalanceContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).FreezeBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/FreezeBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).FreezeBalance(ctx, req.(*core.FreezeBalanceContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_FreezeBalance2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.FreezeBalanceContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).FreezeBalance2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/FreezeBalance2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).FreezeBalance2(ctx, req.(*core.FreezeBalanceContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UnfreezeBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.UnfreezeBalanceContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UnfreezeBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/UnfreezeBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UnfreezeBalance(ctx, req.(*core.UnfreezeBalanceContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UnfreezeBalance2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.UnfreezeBalanceContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UnfreezeBalance2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/UnfreezeBalance2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UnfreezeBalance2(ctx, req.(*core.UnfreezeBalanceContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UnfreezeAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.UnfreezeAssetContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UnfreezeAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/UnfreezeAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UnfreezeAsset(ctx, req.(*core.UnfreezeAssetContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UnfreezeAsset2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.UnfreezeAssetContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UnfreezeAsset2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/UnfreezeAsset2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UnfreezeAsset2(ctx, req.(*core.UnfreezeAssetContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_WithdrawBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.WithdrawBalanceContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).WithdrawBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/WithdrawBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).WithdrawBalance(ctx, req.(*core.WithdrawBalanceContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_WithdrawBalance2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.WithdrawBalanceContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).WithdrawBalance2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/WithdrawBalance2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).WithdrawBalance2(ctx, req.(*core.WithdrawBalanceContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UpdateAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.UpdateAssetContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UpdateAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/UpdateAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UpdateAsset(ctx, req.(*core.UpdateAssetContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UpdateAsset2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.UpdateAssetContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UpdateAsset2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/UpdateAsset2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UpdateAsset2(ctx, req.(*core.UpdateAssetContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ProposalCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.ProposalCreateContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ProposalCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/ProposalCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ProposalCreate(ctx, req.(*core.ProposalCreateContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ProposalApprove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.ProposalApproveContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ProposalApprove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/ProposalApprove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ProposalApprove(ctx, req.(*core.ProposalApproveContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ProposalDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.ProposalDeleteContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ProposalDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/ProposalDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ProposalDelete(ctx, req.(*core.ProposalDeleteContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_BuyStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.BuyStorageContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).BuyStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/BuyStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).BuyStorage(ctx, req.(*core.BuyStorageContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_BuyStorageBytes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.BuyStorageBytesContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).BuyStorageBytes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/BuyStorageBytes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).BuyStorageBytes(ctx, req.(*core.BuyStorageBytesContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_SellStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.SellStorageContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).SellStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/SellStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).SellStorage(ctx, req.(*core.SellStorageContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ExchangeCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.ExchangeCreateContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ExchangeCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/ExchangeCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ExchangeCreate(ctx, req.(*core.ExchangeCreateContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ExchangeInject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.ExchangeInjectContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ExchangeInject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/ExchangeInject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ExchangeInject(ctx, req.(*core.ExchangeInjectContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ExchangeWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.ExchangeWithdrawContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ExchangeWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/ExchangeWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ExchangeWithdraw(ctx, req.(*core.ExchangeWithdrawContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ExchangeTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.ExchangeTransactionContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ExchangeTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/ExchangeTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ExchangeTransaction(ctx, req.(*core.ExchangeTransactionContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ListNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ListNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/ListNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ListNodes(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetAssetIssueByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAssetIssueByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetAssetIssueByAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAssetIssueByAccount(ctx, req.(*core.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetAccountResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAccountResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetAccountResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAccountResource(ctx, req.(*core.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetAssetIssueByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAssetIssueByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetAssetIssueByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAssetIssueByName(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetNowBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetNowBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetNowBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetNowBlock(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetNowBlock2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetNowBlock2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetNowBlock2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetNowBlock2(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetBlockByNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetBlockByNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetBlockByNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetBlockByNum(ctx, req.(*NumberMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetBlockByNum2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetBlockByNum2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetBlockByNum2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetBlockByNum2(ctx, req.(*NumberMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetTransactionCountByBlockNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetTransactionCountByBlockNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetTransactionCountByBlockNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetTransactionCountByBlockNum(ctx, req.(*NumberMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetBlockById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetBlockById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetBlockById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetBlockById(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetBlockByLimitNext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockLimit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetBlockByLimitNext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetBlockByLimitNext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetBlockByLimitNext(ctx, req.(*BlockLimit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetBlockByLimitNext2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockLimit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetBlockByLimitNext2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetBlockByLimitNext2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetBlockByLimitNext2(ctx, req.(*BlockLimit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetBlockByLatestNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetBlockByLatestNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetBlockByLatestNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetBlockByLatestNum(ctx, req.(*NumberMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetBlockByLatestNum2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetBlockByLatestNum2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetBlockByLatestNum2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetBlockByLatestNum2(ctx, req.(*NumberMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetTransactionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetTransactionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetTransactionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetTransactionById(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_DeployContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.CreateSmartContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).DeployContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/DeployContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).DeployContract(ctx, req.(*core.CreateSmartContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetContract(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_TriggerContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.TriggerSmartContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).TriggerContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/TriggerContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).TriggerContract(ctx, req.(*core.TriggerSmartContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ListWitnesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ListWitnesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/ListWitnesses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ListWitnesses(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ListProposals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ListProposals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/ListProposals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ListProposals(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetPaginatedProposalList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetPaginatedProposalList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetPaginatedProposalList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetPaginatedProposalList(ctx, req.(*PaginatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetProposalById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetProposalById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetProposalById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetProposalById(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ListExchanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ListExchanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/ListExchanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ListExchanges(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetPaginatedExchangeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetPaginatedExchangeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetPaginatedExchangeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetPaginatedExchangeList(ctx, req.(*PaginatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetExchangeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetExchangeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetExchangeById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetExchangeById(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetChainParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetChainParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetChainParameters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetChainParameters(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetAssetIssueList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAssetIssueList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetAssetIssueList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAssetIssueList(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetPaginatedAssetIssueList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetPaginatedAssetIssueList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetPaginatedAssetIssueList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetPaginatedAssetIssueList(ctx, req.(*PaginatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_TotalTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).TotalTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/TotalTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).TotalTransaction(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetNextMaintenanceTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetNextMaintenanceTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetNextMaintenanceTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetNextMaintenanceTime(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetTransactionSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.TransactionSign)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetTransactionSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetTransactionSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetTransactionSign(ctx, req.(*core.TransactionSign))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetTransactionSign2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.TransactionSign)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetTransactionSign2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetTransactionSign2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetTransactionSign2(ctx, req.(*core.TransactionSign))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/CreateAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateAddress(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_EasyTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EasyTransferMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).EasyTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/EasyTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).EasyTransfer(ctx, req.(*EasyTransferMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_EasyTransferByPrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EasyTransferByPrivateMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).EasyTransferByPrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/EasyTransferByPrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).EasyTransferByPrivate(ctx, req.(*EasyTransferByPrivateMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GenerateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GenerateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GenerateAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GenerateAddress(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetTransactionInfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetTransactionInfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetTransactionInfoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetTransactionInfoById(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Wallet_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Wallet",
	HandlerType: (*WalletServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccount",
			Handler:    _Wallet_GetAccount_Handler,
		},
		{
			MethodName: "GetAccountById",
			Handler:    _Wallet_GetAccountById_Handler,
		},
		{
			MethodName: "CreateTransaction",
			Handler:    _Wallet_CreateTransaction_Handler,
		},
		{
			MethodName: "CreateTransaction2",
			Handler:    _Wallet_CreateTransaction2_Handler,
		},
		{
			MethodName: "BroadcastTransaction",
			Handler:    _Wallet_BroadcastTransaction_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _Wallet_UpdateAccount_Handler,
		},
		{
			MethodName: "SetAccountId",
			Handler:    _Wallet_SetAccountId_Handler,
		},
		{
			MethodName: "UpdateAccount2",
			Handler:    _Wallet_UpdateAccount2_Handler,
		},
		{
			MethodName: "VoteWitnessAccount",
			Handler:    _Wallet_VoteWitnessAccount_Handler,
		},
		{
			MethodName: "UpdateSetting",
			Handler:    _Wallet_UpdateSetting_Handler,
		},
		{
			MethodName: "VoteWitnessAccount2",
			Handler:    _Wallet_VoteWitnessAccount2_Handler,
		},
		{
			MethodName: "CreateAssetIssue",
			Handler:    _Wallet_CreateAssetIssue_Handler,
		},
		{
			MethodName: "CreateAssetIssue2",
			Handler:    _Wallet_CreateAssetIssue2_Handler,
		},
		{
			MethodName: "UpdateWitness",
			Handler:    _Wallet_UpdateWitness_Handler,
		},
		{
			MethodName: "UpdateWitness2",
			Handler:    _Wallet_UpdateWitness2_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _Wallet_CreateAccount_Handler,
		},
		{
			MethodName: "CreateAccount2",
			Handler:    _Wallet_CreateAccount2_Handler,
		},
		{
			MethodName: "CreateWitness",
			Handler:    _Wallet_CreateWitness_Handler,
		},
		{
			MethodName: "CreateWitness2",
			Handler:    _Wallet_CreateWitness2_Handler,
		},
		{
			MethodName: "TransferAsset",
			Handler:    _Wallet_TransferAsset_Handler,
		},
		{
			MethodName: "TransferAsset2",
			Handler:    _Wallet_TransferAsset2_Handler,
		},
		{
			MethodName: "ParticipateAssetIssue",
			Handler:    _Wallet_ParticipateAssetIssue_Handler,
		},
		{
			MethodName: "ParticipateAssetIssue2",
			Handler:    _Wallet_ParticipateAssetIssue2_Handler,
		},
		{
			MethodName: "FreezeBalance",
			Handler:    _Wallet_FreezeBalance_Handler,
		},
		{
			MethodName: "FreezeBalance2",
			Handler:    _Wallet_FreezeBalance2_Handler,
		},
		{
			MethodName: "UnfreezeBalance",
			Handler:    _Wallet_UnfreezeBalance_Handler,
		},
		{
			MethodName: "UnfreezeBalance2",
			Handler:    _Wallet_UnfreezeBalance2_Handler,
		},
		{
			MethodName: "UnfreezeAsset",
			Handler:    _Wallet_UnfreezeAsset_Handler,
		},
		{
			MethodName: "UnfreezeAsset2",
			Handler:    _Wallet_UnfreezeAsset2_Handler,
		},
		{
			MethodName: "WithdrawBalance",
			Handler:    _Wallet_WithdrawBalance_Handler,
		},
		{
			MethodName: "WithdrawBalance2",
			Handler:    _Wallet_WithdrawBalance2_Handler,
		},
		{
			MethodName: "UpdateAsset",
			Handler:    _Wallet_UpdateAsset_Handler,
		},
		{
			MethodName: "UpdateAsset2",
			Handler:    _Wallet_UpdateAsset2_Handler,
		},
		{
			MethodName: "ProposalCreate",
			Handler:    _Wallet_ProposalCreate_Handler,
		},
		{
			MethodName: "ProposalApprove",
			Handler:    _Wallet_ProposalApprove_Handler,
		},
		{
			MethodName: "ProposalDelete",
			Handler:    _Wallet_ProposalDelete_Handler,
		},
		{
			MethodName: "BuyStorage",
			Handler:    _Wallet_BuyStorage_Handler,
		},
		{
			MethodName: "BuyStorageBytes",
			Handler:    _Wallet_BuyStorageBytes_Handler,
		},
		{
			MethodName: "SellStorage",
			Handler:    _Wallet_SellStorage_Handler,
		},
		{
			MethodName: "ExchangeCreate",
			Handler:    _Wallet_ExchangeCreate_Handler,
		},
		{
			MethodName: "ExchangeInject",
			Handler:    _Wallet_ExchangeInject_Handler,
		},
		{
			MethodName: "ExchangeWithdraw",
			Handler:    _Wallet_ExchangeWithdraw_Handler,
		},
		{
			MethodName: "ExchangeTransaction",
			Handler:    _Wallet_ExchangeTransaction_Handler,
		},
		{
			MethodName: "ListNodes",
			Handler:    _Wallet_ListNodes_Handler,
		},
		{
			MethodName: "GetAssetIssueByAccount",
			Handler:    _Wallet_GetAssetIssueByAccount_Handler,
		},
		{
			MethodName: "GetAccountResource",
			Handler:    _Wallet_GetAccountResource_Handler,
		},
		{
			MethodName: "GetAssetIssueByName",
			Handler:    _Wallet_GetAssetIssueByName_Handler,
		},
		{
			MethodName: "GetNowBlock",
			Handler:    _Wallet_GetNowBlock_Handler,
		},
		{
			MethodName: "GetNowBlock2",
			Handler:    _Wallet_GetNowBlock2_Handler,
		},
		{
			MethodName: "GetBlockByNum",
			Handler:    _Wallet_GetBlockByNum_Handler,
		},
		{
			MethodName: "GetBlockByNum2",
			Handler:    _Wallet_GetBlockByNum2_Handler,
		},
		{
			MethodName: "GetTransactionCountByBlockNum",
			Handler:    _Wallet_GetTransactionCountByBlockNum_Handler,
		},
		{
			MethodName: "GetBlockById",
			Handler:    _Wallet_GetBlockById_Handler,
		},
		{
			MethodName: "GetBlockByLimitNext",
			Handler:    _Wallet_GetBlockByLimitNext_Handler,
		},
		{
			MethodName: "GetBlockByLimitNext2",
			Handler:    _Wallet_GetBlockByLimitNext2_Handler,
		},
		{
			MethodName: "GetBlockByLatestNum",
			Handler:    _Wallet_GetBlockByLatestNum_Handler,
		},
		{
			MethodName: "GetBlockByLatestNum2",
			Handler:    _Wallet_GetBlockByLatestNum2_Handler,
		},
		{
			MethodName: "GetTransactionById",
			Handler:    _Wallet_GetTransactionById_Handler,
		},
		{
			MethodName: "DeployContract",
			Handler:    _Wallet_DeployContract_Handler,
		},
		{
			MethodName: "GetContract",
			Handler:    _Wallet_GetContract_Handler,
		},
		{
			MethodName: "TriggerContract",
			Handler:    _Wallet_TriggerContract_Handler,
		},
		{
			MethodName: "ListWitnesses",
			Handler:    _Wallet_ListWitnesses_Handler,
		},
		{
			MethodName: "ListProposals",
			Handler:    _Wallet_ListProposals_Handler,
		},
		{
			MethodName: "GetPaginatedProposalList",
			Handler:    _Wallet_GetPaginatedProposalList_Handler,
		},
		{
			MethodName: "GetProposalById",
			Handler:    _Wallet_GetProposalById_Handler,
		},
		{
			MethodName: "ListExchanges",
			Handler:    _Wallet_ListExchanges_Handler,
		},
		{
			MethodName: "GetPaginatedExchangeList",
			Handler:    _Wallet_GetPaginatedExchangeList_Handler,
		},
		{
			MethodName: "GetExchangeById",
			Handler:    _Wallet_GetExchangeById_Handler,
		},
		{
			MethodName: "GetChainParameters",
			Handler:    _Wallet_GetChainParameters_Handler,
		},
		{
			MethodName: "GetAssetIssueList",
			Handler:    _Wallet_GetAssetIssueList_Handler,
		},
		{
			MethodName: "GetPaginatedAssetIssueList",
			Handler:    _Wallet_GetPaginatedAssetIssueList_Handler,
		},
		{
			MethodName: "TotalTransaction",
			Handler:    _Wallet_TotalTransaction_Handler,
		},
		{
			MethodName: "GetNextMaintenanceTime",
			Handler:    _Wallet_GetNextMaintenanceTime_Handler,
		},
		{
			MethodName: "GetTransactionSign",
			Handler:    _Wallet_GetTransactionSign_Handler,
		},
		{
			MethodName: "GetTransactionSign2",
			Handler:    _Wallet_GetTransactionSign2_Handler,
		},
		{
			MethodName: "CreateAddress",
			Handler:    _Wallet_CreateAddress_Handler,
		},
		{
			MethodName: "EasyTransfer",
			Handler:    _Wallet_EasyTransfer_Handler,
		},
		{
			MethodName: "EasyTransferByPrivate",
			Handler:    _Wallet_EasyTransferByPrivate_Handler,
		},
		{
			MethodName: "GenerateAddress",
			Handler:    _Wallet_GenerateAddress_Handler,
		},
		{
			MethodName: "GetTransactionInfoById",
			Handler:    _Wallet_GetTransactionInfoById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

// WalletSolidityClient is the client API for WalletSolidity service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WalletSolidityClient interface {
	GetAccount(ctx context.Context, in *core.Account, opts ...grpc.CallOption) (*core.Account, error)
	GetAccountById(ctx context.Context, in *core.Account, opts ...grpc.CallOption) (*core.Account, error)
	ListWitnesses(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*WitnessList, error)
	GetAssetIssueList(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*AssetIssueList, error)
	GetPaginatedAssetIssueList(ctx context.Context, in *PaginatedMessage, opts ...grpc.CallOption) (*AssetIssueList, error)
	// Please use GetNowBlock2 instead of this function.
	GetNowBlock(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.Block, error)
	// Use this function instead of GetNowBlock.
	GetNowBlock2(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*BlockExtention, error)
	// Please use GetBlockByNum2 instead of this function.
	GetBlockByNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*core.Block, error)
	// Use this function instead of GetBlockByNum.
	GetBlockByNum2(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*BlockExtention, error)
	GetTransactionCountByBlockNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*NumberMessage, error)
	GetTransactionById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.Transaction, error)
	GetTransactionInfoById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.TransactionInfo, error)
	// Warning: do not invoke this interface provided by others.
	GenerateAddress(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*AddressPrKeyPairMessage, error)
}

type walletSolidityClient struct {
	cc *grpc.ClientConn
}

func NewWalletSolidityClient(cc *grpc.ClientConn) WalletSolidityClient {
	return &walletSolidityClient{cc}
}

func (c *walletSolidityClient) GetAccount(ctx context.Context, in *core.Account, opts ...grpc.CallOption) (*core.Account, error) {
	out := new(core.Account)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetAccountById(ctx context.Context, in *core.Account, opts ...grpc.CallOption) (*core.Account, error) {
	out := new(core.Account)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/GetAccountById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) ListWitnesses(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*WitnessList, error) {
	out := new(WitnessList)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/ListWitnesses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetAssetIssueList(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*AssetIssueList, error) {
	out := new(AssetIssueList)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/GetAssetIssueList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetPaginatedAssetIssueList(ctx context.Context, in *PaginatedMessage, opts ...grpc.CallOption) (*AssetIssueList, error) {
	out := new(AssetIssueList)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/GetPaginatedAssetIssueList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetNowBlock(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.Block, error) {
	out := new(core.Block)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/GetNowBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetNowBlock2(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*BlockExtention, error) {
	out := new(BlockExtention)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/GetNowBlock2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetBlockByNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*core.Block, error) {
	out := new(core.Block)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/GetBlockByNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetBlockByNum2(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*BlockExtention, error) {
	out := new(BlockExtention)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/GetBlockByNum2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetTransactionCountByBlockNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*NumberMessage, error) {
	out := new(NumberMessage)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/GetTransactionCountByBlockNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetTransactionById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/GetTransactionById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetTransactionInfoById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.TransactionInfo, error) {
	out := new(core.TransactionInfo)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/GetTransactionInfoById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GenerateAddress(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*AddressPrKeyPairMessage, error) {
	out := new(AddressPrKeyPairMessage)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/GenerateAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletSolidityServer is the server API for WalletSolidity service.
type WalletSolidityServer interface {
	GetAccount(context.Context, *core.Account) (*core.Account, error)
	GetAccountById(context.Context, *core.Account) (*core.Account, error)
	ListWitnesses(context.Context, *EmptyMessage) (*WitnessList, error)
	GetAssetIssueList(context.Context, *EmptyMessage) (*AssetIssueList, error)
	GetPaginatedAssetIssueList(context.Context, *PaginatedMessage) (*AssetIssueList, error)
	// Please use GetNowBlock2 instead of this function.
	GetNowBlock(context.Context, *EmptyMessage) (*core.Block, error)
	// Use this function instead of GetNowBlock.
	GetNowBlock2(context.Context, *EmptyMessage) (*BlockExtention, error)
	// Please use GetBlockByNum2 instead of this function.
	GetBlockByNum(context.Context, *NumberMessage) (*core.Block, error)
	// Use this function instead of GetBlockByNum.
	GetBlockByNum2(context.Context, *NumberMessage) (*BlockExtention, error)
	GetTransactionCountByBlockNum(context.Context, *NumberMessage) (*NumberMessage, error)
	GetTransactionById(context.Context, *BytesMessage) (*core.Transaction, error)
	GetTransactionInfoById(context.Context, *BytesMessage) (*core.TransactionInfo, error)
	// Warning: do not invoke this interface provided by others.
	GenerateAddress(context.Context, *EmptyMessage) (*AddressPrKeyPairMessage, error)
}

func RegisterWalletSolidityServer(s *grpc.Server, srv WalletSolidityServer) {
	s.RegisterService(&_WalletSolidity_serviceDesc, srv)
}

func _WalletSolidity_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetAccount(ctx, req.(*core.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetAccountById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetAccountById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetAccountById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetAccountById(ctx, req.(*core.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_ListWitnesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).ListWitnesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/ListWitnesses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).ListWitnesses(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetAssetIssueList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetAssetIssueList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetAssetIssueList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetAssetIssueList(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetPaginatedAssetIssueList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetPaginatedAssetIssueList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetPaginatedAssetIssueList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetPaginatedAssetIssueList(ctx, req.(*PaginatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetNowBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetNowBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetNowBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetNowBlock(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetNowBlock2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetNowBlock2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetNowBlock2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetNowBlock2(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetBlockByNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetBlockByNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetBlockByNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetBlockByNum(ctx, req.(*NumberMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetBlockByNum2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetBlockByNum2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetBlockByNum2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetBlockByNum2(ctx, req.(*NumberMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetTransactionCountByBlockNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetTransactionCountByBlockNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetTransactionCountByBlockNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetTransactionCountByBlockNum(ctx, req.(*NumberMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetTransactionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetTransactionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetTransactionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetTransactionById(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetTransactionInfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetTransactionInfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetTransactionInfoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetTransactionInfoById(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GenerateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GenerateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GenerateAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GenerateAddress(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _WalletSolidity_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.WalletSolidity",
	HandlerType: (*WalletSolidityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccount",
			Handler:    _WalletSolidity_GetAccount_Handler,
		},
		{
			MethodName: "GetAccountById",
			Handler:    _WalletSolidity_GetAccountById_Handler,
		},
		{
			MethodName: "ListWitnesses",
			Handler:    _WalletSolidity_ListWitnesses_Handler,
		},
		{
			MethodName: "GetAssetIssueList",
			Handler:    _WalletSolidity_GetAssetIssueList_Handler,
		},
		{
			MethodName: "GetPaginatedAssetIssueList",
			Handler:    _WalletSolidity_GetPaginatedAssetIssueList_Handler,
		},
		{
			MethodName: "GetNowBlock",
			Handler:    _WalletSolidity_GetNowBlock_Handler,
		},
		{
			MethodName: "GetNowBlock2",
			Handler:    _WalletSolidity_GetNowBlock2_Handler,
		},
		{
			MethodName: "GetBlockByNum",
			Handler:    _WalletSolidity_GetBlockByNum_Handler,
		},
		{
			MethodName: "GetBlockByNum2",
			Handler:    _WalletSolidity_GetBlockByNum2_Handler,
		},
		{
			MethodName: "GetTransactionCountByBlockNum",
			Handler:    _WalletSolidity_GetTransactionCountByBlockNum_Handler,
		},
		{
			MethodName: "GetTransactionById",
			Handler:    _WalletSolidity_GetTransactionById_Handler,
		},
		{
			MethodName: "GetTransactionInfoById",
			Handler:    _WalletSolidity_GetTransactionInfoById_Handler,
		},
		{
			MethodName: "GenerateAddress",
			Handler:    _WalletSolidity_GenerateAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

// WalletExtensionClient is the client API for WalletExtension service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WalletExtensionClient interface {
	// Please use GetTransactionsFromThis2 instead of this function.
	GetTransactionsFromThis(ctx context.Context, in *AccountPaginated, opts ...grpc.CallOption) (*TransactionList, error)
	// Use this function instead of GetTransactionsFromThis.
	GetTransactionsFromThis2(ctx context.Context, in *AccountPaginated, opts ...grpc.CallOption) (*TransactionListExtention, error)
	// Please use GetTransactionsToThis2 instead of this function.
	GetTransactionsToThis(ctx context.Context, in *AccountPaginated, opts ...grpc.CallOption) (*TransactionList, error)
	// Use this function instead of GetTransactionsToThis.
	GetTransactionsToThis2(ctx context.Context, in *AccountPaginated, opts ...grpc.CallOption) (*TransactionListExtention, error)
}

type walletExtensionClient struct {
	cc *grpc.ClientConn
}

func NewWalletExtensionClient(cc *grpc.ClientConn) WalletExtensionClient {
	return &walletExtensionClient{cc}
}

func (c *walletExtensionClient) GetTransactionsFromThis(ctx context.Context, in *AccountPaginated, opts ...grpc.CallOption) (*TransactionList, error) {
	out := new(TransactionList)
	err := c.cc.Invoke(ctx, "/protocol.WalletExtension/GetTransactionsFromThis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletExtensionClient) GetTransactionsFromThis2(ctx context.Context, in *AccountPaginated, opts ...grpc.CallOption) (*TransactionListExtention, error) {
	out := new(TransactionListExtention)
	err := c.cc.Invoke(ctx, "/protocol.WalletExtension/GetTransactionsFromThis2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletExtensionClient) GetTransactionsToThis(ctx context.Context, in *AccountPaginated, opts ...grpc.CallOption) (*TransactionList, error) {
	out := new(TransactionList)
	err := c.cc.Invoke(ctx, "/protocol.WalletExtension/GetTransactionsToThis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletExtensionClient) GetTransactionsToThis2(ctx context.Context, in *AccountPaginated, opts ...grpc.CallOption) (*TransactionListExtention, error) {
	out := new(TransactionListExtention)
	err := c.cc.Invoke(ctx, "/protocol.WalletExtension/GetTransactionsToThis2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletExtensionServer is the server API for WalletExtension service.
type WalletExtensionServer interface {
	// Please use GetTransactionsFromThis2 instead of this function.
	GetTransactionsFromThis(context.Context, *AccountPaginated) (*TransactionList, error)
	// Use this function instead of GetTransactionsFromThis.
	GetTransactionsFromThis2(context.Context, *AccountPaginated) (*TransactionListExtention, error)
	// Please use GetTransactionsToThis2 instead of this function.
	GetTransactionsToThis(context.Context, *AccountPaginated) (*TransactionList, error)
	// Use this function instead of GetTransactionsToThis.
	GetTransactionsToThis2(context.Context, *AccountPaginated) (*TransactionListExtention, error)
}

func RegisterWalletExtensionServer(s *grpc.Server, srv WalletExtensionServer) {
	s.RegisterService(&_WalletExtension_serviceDesc, srv)
}

func _WalletExtension_GetTransactionsFromThis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountPaginated)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletExtensionServer).GetTransactionsFromThis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletExtension/GetTransactionsFromThis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletExtensionServer).GetTransactionsFromThis(ctx, req.(*AccountPaginated))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletExtension_GetTransactionsFromThis2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountPaginated)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletExtensionServer).GetTransactionsFromThis2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletExtension/GetTransactionsFromThis2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletExtensionServer).GetTransactionsFromThis2(ctx, req.(*AccountPaginated))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletExtension_GetTransactionsToThis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountPaginated)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletExtensionServer).GetTransactionsToThis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletExtension/GetTransactionsToThis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletExtensionServer).GetTransactionsToThis(ctx, req.(*AccountPaginated))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletExtension_GetTransactionsToThis2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountPaginated)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletExtensionServer).GetTransactionsToThis2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletExtension/GetTransactionsToThis2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletExtensionServer).GetTransactionsToThis2(ctx, req.(*AccountPaginated))
	}
	return interceptor(ctx, in, info, handler)
}

var _WalletExtension_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.WalletExtension",
	HandlerType: (*WalletExtensionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTransactionsFromThis",
			Handler:    _WalletExtension_GetTransactionsFromThis_Handler,
		},
		{
			MethodName: "GetTransactionsFromThis2",
			Handler:    _WalletExtension_GetTransactionsFromThis2_Handler,
		},
		{
			MethodName: "GetTransactionsToThis",
			Handler:    _WalletExtension_GetTransactionsToThis_Handler,
		},
		{
			MethodName: "GetTransactionsToThis2",
			Handler:    _WalletExtension_GetTransactionsToThis2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

// DatabaseClient is the client API for Database service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DatabaseClient interface {
	// for tapos
	GetBlockReference(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*BlockReference, error)
	GetDynamicProperties(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.DynamicProperties, error)
	GetNowBlock(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.Block, error)
	GetBlockByNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*core.Block, error)
}

type databaseClient struct {
	cc *grpc.ClientConn
}

func NewDatabaseClient(cc *grpc.ClientConn) DatabaseClient {
	return &databaseClient{cc}
}

func (c *databaseClient) GetBlockReference(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*BlockReference, error) {
	out := new(BlockReference)
	err := c.cc.Invoke(ctx, "/protocol.Database/getBlockReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) GetDynamicProperties(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.DynamicProperties, error) {
	out := new(core.DynamicProperties)
	err := c.cc.Invoke(ctx, "/protocol.Database/GetDynamicProperties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) GetNowBlock(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.Block, error) {
	out := new(core.Block)
	err := c.cc.Invoke(ctx, "/protocol.Database/GetNowBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) GetBlockByNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*core.Block, error) {
	out := new(core.Block)
	err := c.cc.Invoke(ctx, "/protocol.Database/GetBlockByNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatabaseServer is the server API for Database service.
type DatabaseServer interface {
	// for tapos
	GetBlockReference(context.Context, *EmptyMessage) (*BlockReference, error)
	GetDynamicProperties(context.Context, *EmptyMessage) (*core.DynamicProperties, error)
	GetNowBlock(context.Context, *EmptyMessage) (*core.Block, error)
	GetBlockByNum(context.Context, *NumberMessage) (*core.Block, error)
}

func RegisterDatabaseServer(s *grpc.Server, srv DatabaseServer) {
	s.RegisterService(&_Database_serviceDesc, srv)
}

func _Database_GetBlockReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).GetBlockReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Database/GetBlockReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).GetBlockReference(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_GetDynamicProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).GetDynamicProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Database/GetDynamicProperties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).GetDynamicProperties(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_GetNowBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).GetNowBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Database/GetNowBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).GetNowBlock(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_GetBlockByNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).GetBlockByNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Database/GetBlockByNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).GetBlockByNum(ctx, req.(*NumberMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Database_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Database",
	HandlerType: (*DatabaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getBlockReference",
			Handler:    _Database_GetBlockReference_Handler,
		},
		{
			MethodName: "GetDynamicProperties",
			Handler:    _Database_GetDynamicProperties_Handler,
		},
		{
			MethodName: "GetNowBlock",
			Handler:    _Database_GetNowBlock_Handler,
		},
		{
			MethodName: "GetBlockByNum",
			Handler:    _Database_GetBlockByNum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

// NetworkClient is the client API for Network service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetworkClient interface {
}

type networkClient struct {
	cc *grpc.ClientConn
}

func NewNetworkClient(cc *grpc.ClientConn) NetworkClient {
	return &networkClient{cc}
}

// NetworkServer is the server API for Network service.
type NetworkServer interface {
}

func RegisterNetworkServer(s *grpc.Server, srv NetworkServer) {
	s.RegisterService(&_Network_serviceDesc, srv)
}

var _Network_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Network",
	HandlerType: (*NetworkServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "api/api.proto",
}
